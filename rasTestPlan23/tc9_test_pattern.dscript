// -------------------------------------------------------------------------------------------------------------
//                              Copyright (C) 2022-2030 Laurent Ravera, IRAP Toulouse.
// -------------------------------------------------------------------------------------------------------------
//                              This file is part of the ATHENA X-IFU DRE SGSE tools.
//
//                              sgse tools javascripts are free software: you can redistribute it and/or modify
//                              it under the terms of the GNU General Public License as published by
//                              the Free Software Foundation, either version 3 of the License, or
//                              (at your option) any later version.
//
//                              This program is distributed in the hope that it will be useful,
//                              but WITHOUT ANY WARRANTY; without even the implied warranty of
//                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                              GNU General Public License for more details.
//
//                              You should have received a copy of the GNU General Public License
//                              along with this program.  If not, see <https://www.gnu.org/licenses/>.
// -------------------------------------------------------------------------------------------------------------
//    email                     laurent.ravera@irap.omp.eu
//    @file                     tc9_test_pattern.dscript
// -------------------------------------------------------------------------------------------------------------
//    @details
//
//    This script tests the test pattern.
//
// -------------------------------------------------------------------------------------------------------------

// imports
include("../ras/rasTools.dscript");
include("../ras/rasRegAddresses.dscript");

include("../common/utilTools.dscript");


/**
 * Checks the setting of the address overlap
 */
function tc9_test_pattern() {

    plotLongLine();
    print("* Checking the test pattern");
    print(" ");

    print(TAB1 + "Selecting ICU main");
    sendToTMTC_selectICU(ICUMain);
    waitMs(2000); // waiting so that the FPGA starts

    print(TAB1 + "Setting DAC levels");
    const lowLevel = 0x000;
    const highLevel = 0xFFF;
    print(TAB3 + "PS LOW:" + lowLevel);
    setRAS_DAC(DAC_PS_LOW, lowLevel);
    print(TAB3 + "PS HIGH:" + highLevel);
    setRAS_DAC(DAC_PS_HIGH, highLevel);
    print(TAB3 + "GS LOW:" + lowLevel);
    setRAS_DAC(DAC_GS_LOW, lowLevel);
    print(TAB3 + "GS HIGH:" + highLevel);
    setRAS_DAC(DAC_GS_HIGH, highLevel);

    print(TAB1 + "Setting the address sequence for PS0 and PS1");
    // Pixels
    setRAS_addressSequence( 0, 0x0000_0000_0000);
    setRAS_addressSequence( 1, 0xFFFF_FFFF_FFFF);

    print(TAB1 + "Setting the test pattern");
    const patternParameters = [
        [0x0000, 0x0007, 0x0002, 0x07FF],   // Slope upward
        [0x0FFF, 0x0007, -1*0x0002, 0x07FF],    // Slope downward
        [0x0000, 0x3FFF, 0x0000, 0x0001],   // Plateau
        [0x0000, 0x0020, 0x0002, 0x07FF],   // Slope upward
        [0x0FFF, 0x0020, -1*0x0002, 0x07FF]];    // Slope downward
    setRAS_testPattern(patternParameters);

    answer = getText("Ready to start 3 patterns on PS0 line? [yes]", " ");
    setRAS_testPatternEnable('PS_LOW', true, false, 3);
    print(" ");

    answer = getText("Ready to start infinite patterns on PS1 line? [yes]", " ");
    setRAS_testPatternEnable('PS_HIGH', true, true, 0);
    print(" ");

    answer = getText("OK to stop the pattern? [yes]", " ");
    setRAS_testPatternEnable('PS_HIGH', false, false, 0);
    print(" ");

}

tc9_test_pattern();

/**********************************************************************************************************************/

