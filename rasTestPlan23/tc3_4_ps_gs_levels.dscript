// -------------------------------------------------------------------------------------------------------------
//                              Copyright (C) 2022-2030 Laurent Ravera, IRAP Toulouse.
// -------------------------------------------------------------------------------------------------------------
//                              This file is part of the ATHENA X-IFU DRE SGSE tools.
//
//                              sgse tools javascripts are free software: you can redistribute it and/or modify
//                              it under the terms of the GNU General Public License as published by
//                              the Free Software Foundation, either version 3 of the License, or
//                              (at your option) any later version.
//
//                              This program is distributed in the hope that it will be useful,
//                              but WITHOUT ANY WARRANTY; without even the implied warranty of
//                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                              GNU General Public License for more details.
//
//                              You should have received a copy of the GNU General Public License
//                              along with this program.  If not, see <https://www.gnu.org/licenses/>.
// -------------------------------------------------------------------------------------------------------------
//    email                     laurent.ravera@irap.omp.eu
//    @file                     tc3_4_ps_gs_levels.dscript
// -------------------------------------------------------------------------------------------------------------
//    @details
//
//    This script tests the setting of the PS levels.
//
// -------------------------------------------------------------------------------------------------------------

// imports
include("../ras/rasTools.dscript");
include("../ras/rasRegAddresses.dscript");

include("../common/constants.dscript");
include("../common/utilTools.dscript");


/**
 * Checks the address line levels
 * @param {number} dac1_p - first DAC id
 * @param {number} dac2_p - second DAC id
 * @param {number} add1_p - address line
 *  0 - 7 for PS0 - PS7
 *  8 - 13 for GS0 - GS5
 * @param {number} add2_p - address line
 * @param {number} seq_p - 48 bits sequence
 * @param {array} values_p - a set of 3 values for the low level
 */
function tc3_4_ps_gs_levels(dac1_p, dac2_p, add1_p, add2_p, seq_p, values_p) {

    print(TAB1 + "Setting address sequence for address " + add1_p);
    setRAS_addressSequence(add1_p, seq_p);

    print(TAB1 + "Setting sequence ON");
    setRAS_seqMode(ON);

    const v = 0xEFF;
    // Setting the HIGH level to a constant value and changing the LOW level
    print(TAB1 + "Setting HIGH level to " + to_hexaString(v));
    setRAS_DAC(dac1_p, v);

    for (var i_value = 0; i_value < 3; i_value +=1) {
        print(TAB2 + "Setting LOW level to " + to_hexaString(values_p[i_value]));
        setRAS_DAC(dac2_p, values_p[i_value]);
        answer = getText("Measure the short period level (V)", " ");
        print(TAB3 + "==> " + answer + "V");
        print(" ");
    }
    plotSmallLine();

    // Setting the LOW level to a constant value and changing the HIGH level
    print(TAB1 + "Setting LOW level to " + to_hexaString(v));
    setRAS_DAC(dac2_p, v);

    for (var i_value = 0; i_value < 3; i_value +=1) {
        print(TAB2 + "Setting HIGH level to " + to_hexaString(values_p[i_value]));
        setRAS_DAC(dac1_p, values_p[i_value]);
        answer = getText("Measure the short period level (V)", " ");
        print(TAB3 + "==> " + answer + "V");
        print(" ");
    }
    plotSmallLine();

    const step_duration = 1000;
    const level1 = 0x000;
    const level2 = 0xFC0;
    const nSteps = 64;
    // Scanning the HIGH level on pixel select 0
    print(TAB1 + "Scanning the HIGH level on address line " + add1_p);
    setRAS_addressSequence(add1_p, 0xFFFFFFFFFFFF);
    RASscan_dacLevel(dac1_p, level1, level2, nSteps, step_duration, true);
    plotSmallLine();

    // Scanning the LOW level on pixel select 1
    print(TAB1 + "Scanning the LOW level on address line " + add2_p);
    setRAS_addressSequence(add2_p, 0x000000000000);
    RASscan_dacLevel(dac2_p, level1, level2, nSteps, step_duration, true);
    plotSmallLine();

}

const seq = 0x0FFF0FFF0FFF;
const values = [0x000, 0x010, 0xFFF];

plotLongLine();
print("* Checking the setting of the PS levels...");
var addressId1 = 0; // pixel 0
var addressId2 = 1; // pixel 0
rasInit();
tc3_4_ps_gs_levels(DAC_PS_HIGH, DAC_PS_LOW, addressId1, addressId2, seq, values);
print(" ");

plotLongLine();
print("* Checking the setting of the GS levels...");
addressId1 = 8; // group 0
addressId2 = 9; // group 1
rasInit();
tc3_4_ps_gs_levels(DAC_GS_HIGH, DAC_GS_LOW, addressId1, addressId2, seq, values);


/**********************************************************************************************************************/

