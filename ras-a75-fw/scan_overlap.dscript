//
//  Copyright (C) 2021-2030 Laurent Ravera, IRAP Toulouse.
//  This file is part of the ATHENA X-IFU DRE test driving software.
//
//  ras-js is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
//  laurent.ravera@irap.omp.eu
//  scan_overlap.dscript
//

include("./ras_tools.dscript")
include("./default_configurations.dscript")

// Definition of some information that can be writen in a loang file
operator_name=get_operator_name();
session_name=get_session_name();
session_comment = "No comment";

// Defining a default configuration
//---------------------------------------------------------------------------------------
// Timing configuration
// Fmasterclock=125MHz, period=8ns
lineperiod = 20; // corresponds to 160ns
delay = 0; 
overlap = 0; 


//---------------------------------------------------------------------------------------
// Levels configuration
// (1 ADU corresponds approximately to 1mV)
//    0x0D5 corresponds to 210mV
//    0x14A corresponds to 325mV (Phi0/2)
level_min = 0x0000;
level_max = DAC_MAX_RATING;
pixel_on_lvl = level_max; 
pixel_off_lvl = level_min;
group_on_lvl = level_max;
group_off_lvl = level_min;

nbrows = 4;
seq = test_overlap();
syncseq = 0x00000001;

//---------------------------------------------------------------------------------------
// Sending the parameters to the firmware
configure_ras(nbrows, lineperiod, delay, overlap, seq, syncseq, pixel_off_lvl, pixel_on_lvl, group_off_lvl, group_on_lvl);


//---------------------------------------------------------------------------------------
// Scanning the Overlap
start = 0;
stop = 15;
step = 1;
step_duration_ms=1000;
scan_overlap(start, stop, step, step_duration_ms);


//---------------------------------------------------------------------------------------
