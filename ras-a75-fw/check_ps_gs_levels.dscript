
//
//  Copyright (C) 2021-2030 Laurent Ravera, IRAP Toulouse.
//  This file is part of the ATHENA X-IFU DRE test driving software.
//
//  ras-js is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.

//  laurent.ravera@irap.omp.eu
//  File name: check_ps_gs_levels.dscript
//  Purpose: This script scans the PS0 and GS0 outputs over the full 
//           scale range in order to verify the requirement XIFU-DRE-R-0160
include("./ras_tools.dscript")
include("./default_configurations.dscript")

print("#------------------------------------------------------")
testDate = maDate();

// Definition of some information that can be written in a log file
//operator_name=get_operator_name();
//session_name=get_session_name();
//session_comment = "No comment";

print("#------------------------------------------------------")
testDate = maDate();

//---------------------------------------------------------------------------------------
// Definition of the RAS configuration 
//---------------------------------------------------------------------------------------
delay = 0; // # of times 8ns
overlap = 0;

//---------------------------------------------------------------------------------------
// Levels configuration
//    0xBC0 corresponds to 900mV in differential ended mode
level_min = 0x0000;
level_max = 0x0BC0;

pixel_on_lvl = level_max; 
pixel_off_lvl = level_min;
group_on_lvl = level_max;
group_off_lvl = level_min;

// Choose the sequence here
seq_lsb = seq_xifu_lsb;
seq_msb = seq_xifu_msb;

sync_seq_lsb = sync_seq_xifu_lsb;
sync_seq_msb = sync_seq_xifu_msb;

configure_ras(seq_lsb, seq_msb, sync_seq_lsb, sync_seq_msb, delay, overlap, pixel_off_lvl, pixel_on_lvl, group_off_lvl, group_on_lvl);

//---------------------------------------------------------------------------------------

print("#------------------------------------------------------")
print(" Scanning the ON and OFF levels of pixel and group addresses...")

//---------------------------------------------------------------------------------------
// RAS ramps / resolution

step_size = 16 // With step = 16 the number of steps over FSR is 2^8 (compliant with requirement)

// Scan to change high to low and low to high
print("Scan to change ON level to OFF and OFF level to ON...")
for (level = level_min; level < level_max; level+= step_size)
{
	ON_hex=('0000' + ((level_max-level).toString(16).toUpperCase()).slice(-4))
	OFF_hex=('0000' + ((level).toString(16).toUpperCase()).slice(-4))
	print("ON level = 0x" + ON_hex + ", OFF level = 0x" + OFF_hex)
	set_mode(MODE_DEF);
	stop_dacs();
	set_dac(DAC_PIXEL_OFF, level);
	set_dac(DAC_GROUP_OFF, level);
	set_dac(DAC_PIXEL_ON, level_max-level);
	set_dac(DAC_GROUP_ON, level_max-level);
	start_dacs();
	set_mode(MODE_RUN)
}

// Scan to go back to the initial setting
print("Scan to go back to initial setting with ON level to ON and OFF level to OFF...")
for (level = level_max; level > 0; level-= step_size)
{
	ON_hex=('0000' + ((level_max-level).toString(16).toUpperCase()).slice(-4))
	OFF_hex=('0000' + ((level).toString(16).toUpperCase()).slice(-4))
	print("ON level = 0x" + ON_hex + ", OFF level = 0x" + OFF_hex)
	set_mode(MODE_DEF);
	stop_dacs();
	set_dac(DAC_PIXEL_OFF, level);
	set_dac(DAC_GROUP_OFF, level);
	set_dac(DAC_PIXEL_ON, level_max-level);
	set_dac(DAC_GROUP_ON, level_max-level);
	start_dacs();
	set_mode(MODE_RUN)
}

print("#------------------------------------------------------")
print("# End of test")
print("#------------------------------------------------------")
saveLogContent("report_check_ps_gs_levels_" + testDate + ".txt")

//---------------------------------------------------------------------------------------