
//
//  Copyright (C) 2021-2030 Laurent Ravera, IRAP Toulouse.
//  This file is part of the ATHENA X-IFU DRE test driving software.
//
//  ras-js is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.

//  laurent.ravera@irap.omp.eu
//  File name: check_ps_gs_levels.dscript
//  Purpose: This script scans the PS0 and GS0 outputs over the full 
//           scale range in order to verify the requirement XIFU-DRE-R-0160

include("./ras_tools.dscript")
include("./default_configurations.dscript")


// Definition of some information that can be writen in a log file
operator_name=get_operator_name();
session_name=get_session_name();
session_comment = "No comment";


//---------------------------------------------------------------------------------------
// Timing configuration
// Fmasterclock=245.76 MHz, period=4.08ns
lineperiod = 160; // Nb of master clock periods 
delay = 222; // Nb of master clock periods
overlap = 0; // Nb of master clock periods


//---------------------------------------------------------------------------------------
// Levels configuration
// (1 ADU corresponds approximately to 1mV)
//    0x0D5 corresponds to 210mV
//    0x14A corresponds to 325mV (Phi0/2)
level_min = 0x000;
level_max = 0xFFF;
row_on_lvl = level_max; 
row_off_lvl = level_min;
cluster_on_lvl = level_max;
cluster_off_lvl = level_min;


//---------------------------------------------------------------------------------------
// Sequence configuration
// Configuring all the addresses to OFF then chnaging the OFF level

nbrows = 13;
// Comment / uncomment the requested sequence
//irow=1;
rowseq = seqAllOff();
//rowseq = seqAlwaysOn(irow);
//rowseq = seqBlink(irow);
//rowseq = seqIncrementalIRAP();
//rowseq = seqIncrementalIRAP();
//rowseq = seqTuneTimings();

syncseq = 0x00000001;


//---------------------------------------------------------------------------------------
// Sending the parameters to the firmware
print_board_and_fw_id();
configure_ras(nbrows, lineperiod, delay, overlap, rowseq, syncseq, row_on_lvl, row_off_lvl, cluster_on_lvl, cluster_off_lvl);


//---------------------------------------------------------------------------------------
// RAS levels min/max measurements

// Setting the row address to the minimum level and the cluster address to the maximum level
set_dac(DAC_ROW_OFF, level_min);
set_dac(DAC_CLUSTER_OFF, level_max);
row_min = getText("Please measure the level min of row addresses (mV):", "")
cluster_max = getText("Please measure the level max of cluster addresses (mV):", "")

alert("Ready to continue?:")

// Setting the row address to the maximum level and the cluster address to the minimum level
set_dac(DAC_ROW_OFF, level_max);
set_dac(DAC_CLUSTER_OFF, level_min);
row_max = getText("Please measure the level max of row addresses (mV):", "")
cluster_min = getText("Please measure the level min of cluster addresses (mV):", "")


//---------------------------------------------------------------------------------------
// RAS ramps / resolution
wait_duration = 50
step = 16 // With step = 16 the number of steps is 2^8 (compliant with requirement)

alert("Ready to see ramps on row addresses?:")

do_ramp = "Yes"
while (do_ramp == "Yes")
{
    for (level = level_min; level <= level_max; level+= step)
    {
        set_dac(DAC_ROW_OFF, level);
        waitMs(wait_duration)
    }
    do_ramp = getItem("Do you want the same ramp again?:", ["Yes", "Please, no!"])
}


alert("Ready to see ramps on cluster addresses?:")

do_ramp = "Yes"
while (do_ramp == "Yes")
{
    for (level = level_min; level <= level_max; level+= step)
    {
        set_dac(DAC_CLUSTER_OFF, level);
        waitMs(wait_duration)
    }
    do_ramp = getItem("Do you want the same ramp again?:", ["Yes", "Please, no!"])
}

//---------------------------------------------------------------------------------------