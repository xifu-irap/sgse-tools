// -------------------------------------------------------------------------------------------------------------
//                              Copyright (C) 2022-2030 Laurent Ravera, IRAP Toulouse.
// -------------------------------------------------------------------------------------------------------------
//                              This file is part of the ATHENA X-IFU DRE SGSE tools.
//
//                              sgse tools javascripts are free software: you can redistribute it and/or modify
//                              it under the terms of the GNU General Public License as published by
//                              the Free Software Foundation, either version 3 of the License, or
//                              (at your option) any later version.
//
//                              This program is distributed in the hope that it will be useful,
//                              but WITHOUT ANY WARRANTY; without even the implied warranty of
//                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                              GNU General Public License for more details.
//
//                              You should have received a copy of the GNU General Public License
//                              along with this program.  If not, see <https://www.gnu.org/licenses/>.
// -------------------------------------------------------------------------------------------------------------
//    email                     laurent.ravera@irap.omp.eu
//    @file                     ampSquidDacTest.dscript
// -------------------------------------------------------------------------------------------------------------
//    @details
//
//    This file tests the Amp SQUID DACs of the DMX boards.
//
// -------------------------------------------------------------------------------------------------------------

// imports
include("../demux/dmxTools.dscript");
include("../demux/dmxRegAddresses.dscript");
include("../demux/dmxHk.dscript");
include("../common/utilTools.dscript");

/**
 * This function activates the Mux SQUID and outputs the FB0 set of values or the test pattern
 * @param {number} colId - column under test
 * @param {number} offsetMode - offset mode (OFFSET_MODE_OFF, OFFSET_MODE_OFFSET, OFFSET_MODE_TESTPATTERN)
 * @param {number} offsetLSB - [0, 2^12[
 * @param {array} offsetFine - 34 3-bit values
 */
function testSequence(colId, offsetMode, offsetLSB, offsetFine) {

    // Setting the Offset LSB for the selected colum
    for (var col = 0; col < DMX_NB_COL; col++) {
        if (col === colId) setDMX_sqa_OffsetLSB(col, offsetLSB);
        else setDMX_sqa_OffsetLSB(col, 0);
    }

    // Setting the Offset fine for the selected colum
    const zeroArray = makeArray(0, 34);
    for (var col = 0; col < DMX_NB_COL; col++) {
        if (col === colId) setDMX_sqa_OffsetFine(col, offsetFine, offsetFine);
        else setDMX_sqa_OffsetFine(col, zeroArray, zeroArray);
    }

    // Setting the coarse offset values
    const minVal = 0;
    const midVal = Math.pow(2, 11);
    const maxVal = Math.pow(2,12)-1;
    setDMX_sqa_OffsetCoarse(colId, midVal);

    // Setting the testPattern to a rising slope
    const a = -1*Math.pow(2, 15);
    const b = 0;
    const c = Math.pow(2,8);
    const N = Math.pow(2,8) - 1;
    const sawPattern = [
        [a, b, c, N],  // Slope upward
        [a/2, b, c/2, N],  // Slope upward
        [0, 0, 0, 0],  // Nothing
        [0, 0, 0, 0],  // Nothing
        [0, 0, 0, 0]  // Nothing
    ]; 
    setDMX_testPattern(sawPattern);

/*
	const squarePattern = [
        [0x5555, 0, 0, 1],  // Plateau
        [0, 0, 0, 0],  // Nothing
		[0, 0, 0, 0],  // Nothing
        [0, 0, 0, 0],  // Nothing
        [0, 0, 0, 0]  // Nothing
    ];
    setDMX_testPattern(squarePattern);
    */

    var colOffsetMode = [OFFSET_MODE_OFF, OFFSET_MODE_OFF, OFFSET_MODE_OFF, OFFSET_MODE_OFF];

    if (offsetMode === OFFSET_MODE_OFF) {
        // Setting the offset mode to OFF for all the columns
        setDMX_offsetMode(colOffsetMode);
    }

    if (offsetMode === OFFSET_MODE_OFFSET) {
        // Setting the offset mode to OFF for the selected colum (OFF to the others)
        colOffsetMode[colId] = OFFSET_MODE_OFFSET;
        setDMX_offsetMode(colOffsetMode);
    }

    if (offsetMode === OFFSET_MODE_TESTPATTERN) {
	
		// Setting the LSB size to 0
		setDMX_sqa_OffsetLSB(colId, 0);

        // Setting the feedback mode of column 0 to "test pattern"
        colOffsetMode[colId] = OFFSET_MODE_TESTPATTERN;
        setDMX_offsetMode(colOffsetMode);

        var enable = true;
        var infinitely = true;
        var nbTime = 0x9;
        setDMX_testPatternEnable(enable, infinitely, nbTime);
    }
}

// -------------------------------------------------------------------------------------------------------------

const colId = 3;

const AMP_SQ_OFFSET_LSB = Math.pow(2, 12)-1;  // between 0 and 2^12-1
//const AMP_SQ_OFFSET_LSB = 0x555; 
const AMP_SQ_OFFSET_FINE = [  // 34 3-bit values
    0, 1, 2, 3, 4, 5, 6, 7,
    0, 1, 2, 3, 4, 5, 6, 7,
    7, 6, 5, 4, 3, 2, 1, 0,
    7, 6, 5, 4, 3, 2, 1, 0,
    5, 2
];

// You should uncomment a single of the following lines
//testSequence(colId, OFFSET_MODE_OFF);
//testSequence(colId, OFFSET_MODE_OFFSET, AMP_SQ_OFFSET_LSB, AMP_SQ_OFFSET_FINE);
testSequence(colId, OFFSET_MODE_TESTPATTERN, AMP_SQ_OFFSET_LSB, AMP_SQ_OFFSET_FINE);


// Amp SQUID DAC of column 0 should be ON. The others should be OFF.
// We should see the correct signal at the DAC output

// -------------------------------------------------------------------------------------------------------------
/*
col=0;


var offsetCoarse0 = 0;
var offsetCoarse1 = Math.pow(2, 12)-1;
var offsetCoarse2 = Math.pow(2, 10)-1;
var offsetCoarse3 = 10;

// Reglage du DAC Offset Coarse (n'a un effet que si la valeur change)
var colOffsetMode = [OFFSET_MODE_OFFSET, OFFSET_MODE_OFFSET, OFFSET_MODE_OFFSET, OFFSET_MODE_OFFSET];
setDMX_offsetMode(colOffsetMode);
setDMX_sqa_OffsetCoarse(col, offsetCoarse2);


v0 = 0;
v1 = 100;
v2 = Math.pow(2, 12)-1;

// Reglage du DAC Offset LSB (n'a un effet que si la valeur change)

setDMX_sqa_OffsetLSB(col, v0);

function loop_LSB() {
	for (i=0; i<100; i+=1) {
		setDMX_sqa_OffsetLSB(col, 1*i);
		waitMs(500);
		print(" =>", i);
	}
}
loop_LSB()

setDMX_sqa_OffsetLSB(col, v0); */

print("Done !")