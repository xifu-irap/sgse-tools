// -------------------------------------------------------------------------------------------------------------
//                              Copyright (C) 2022-2030 Laurent Ravera, IRAP Toulouse.
// -------------------------------------------------------------------------------------------------------------
//                              This file is part of the ATHENA X-IFU DRE SGSE tools.
//
//                              sgse tools javascripts are free software: you can redistribute it and/or modify
//                              it under the terms of the GNU General Public License as published by
//                              the Free Software Foundation, either version 3 of the License, or
//                              (at your option) any later version.
//
//                              This program is distributed in the hope that it will be useful,
//                              but WITHOUT ANY WARRANTY; without even the implied warranty of
//                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                              GNU General Public License for more details.
//
//                              You should have received a copy of the GNU General Public License
//                              along with this program.  If not, see <https://www.gnu.org/licenses/>.
// -------------------------------------------------------------------------------------------------------------
//    email                     laurent.ravera@irap.omp.eu
//    @file                     muxSquidDacTest.dscript
// -------------------------------------------------------------------------------------------------------------
//    @details
//
//    This file tests the Mux SQUID DACs of the DMX boards.
//
// -------------------------------------------------------------------------------------------------------------

// imports
include("../demux/dmxTools.dscript");
include("../demux/dmxRegAddresses.dscript");
include("../demux/dmxHk.dscript");
include("../common/utilTools.dscript");
include("../common/constants.dscript");

/**
 * This function activates the Mux SQUID and outputs the FB0 set of values or the test pattern
 * @param {number} colId - column under test
 * @param {number} fbMode - feedback mode (FEEDBACK_MODE_OPEN_LOOP or FEEDBACK_MODE_TESTPATTERN)
 */
function testSequence(colId, fbMode) {

    // Switching ON the feedback for the selected column
    var colOnOff = [OFF, OFF, OFF, OFF];
    colOnOff[colId] = ON;
    setDMX_feedbackOnOff(colOnOff);

    // Setting the feedback FB0 values
    const minVal = convert_sInt_to_2compInt(-1*Math.pow(2, 15), 16);
    const midVal = convert_sInt_to_2compInt(0, 16);
    const maxVal = convert_sInt_to_2compInt(Math.pow(2,15)-1, 16);
	
	//const minVal = convert_sInt_to_2compInt(-1*Math.pow(2, 15), 16);
    //const midVal = minVal;
    //const maxVal = minVal; 
	
    var tabFb0 = [
        minVal, midVal, maxVal, minVal, midVal, maxVal, minVal, midVal, maxVal,
        minVal, midVal, maxVal, minVal, midVal, maxVal, minVal, midVal, maxVal,
        minVal, midVal, maxVal, minVal, midVal, maxVal, minVal, midVal, maxVal,
        minVal, midVal, maxVal, minVal, midVal, maxVal, minVal
    ];
    setDMX_fb0(colId, tabFb0);

    // Setting the testPattern to a rising slope
    const a = -1*Math.pow(2, 15);
    const b = 0;
    const c = Math.pow(2,8);
    const N = Math.pow(2,8) - 1;
    const sawPattern = [
        [a, b, c, N],  // Slope upward
        [a/2, b, c/2, N],  // Slope upward
        [0, 0, 0, 0],  // Nothing
        [0, 0, 0, 0],  // Nothing
        [0, 0, 0, 0]  // Nothing
    ];
    setDMX_testPattern(sawPattern); 

/*
	const a = -1*Math.floor((Math.pow(2, 15)-1)*0.02);
    const b = 256;
    const c = 0;
    const N = 1;
    const squarePattern = [
        [a, b, c, N],  // plateau
        [-a, b, -c, N],  // plateau
        [0, 0, 0, 0],  // Nothing
        [0, 0, 0, 0],  // Nothing
        [0, 0, 0, 0]  // Nothing
    ];
    setDMX_testPattern(squarePattern);
*/

    // Selecting the pulse shaping type (0, 1, 2, 3)
    var pulseShapingType = 0;
    setDMX_pulseShapingSelection(colId, pulseShapingType);

    if (fbMode === FEEDBACK_MODE_OPEN_LOOP) {
        // Setting the feedback modes to "open loop" for all the pixels of the selected column
        var tabFbModesOpenLoop = makeArray(DMX_NB_PIX_PER_COL, FEEDBACK_MODE_OPEN_LOOP);
        setDMX_sqm_FBMode(colId, tabFbModesOpenLoop);
    }

    if (fbMode === FEEDBACK_MODE_TESTPATTERN) {
        // Setting the feedback mode to "test pattern" for all the pixels of the selected column
        var tabFbModesTstPattern = makeArray(DMX_NB_PIX_PER_COL, FEEDBACK_MODE_TESTPATTERN);
        setDMX_sqm_FBMode(colId, tabFbModesTstPattern);

        var enable = true;
        var infinitely = true;
        var nbTime = 0x9;
        setDMX_testPatternEnable(enable, infinitely, nbTime);
    }
}

// -------------------------------------------------------------------------------------------------------------

const colId = 2;

// You should uncomment a single of the following lines
testSequence(colId, FEEDBACK_MODE_OPEN_LOOP);
//testSequence(colId, FEEDBACK_MODE_TESTPATTERN);


// Uncomment to switch the DAC OFF
//      Switching the feedback OFF
//setDMX_feedbackOnOff([OFF, OFF, OFF, OFF]);

// Reading the HK
printDMX_HK();

// -------------------------------------------------------------------------------------------------------------
print("Done!");