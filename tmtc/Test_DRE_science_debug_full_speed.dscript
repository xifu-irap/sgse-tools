// -------------------------------------------------------------------------------------------------------------
//                              Copyright (C) 2022-2030 Ken-ji de la Rosa, IRAP Toulouse.
// -------------------------------------------------------------------------------------------------------------
//                              This file is part of the ATHENA X-IFU DRE Focal Plane Assembly simulator.
//
//                              tmtc-fw is free software: you can redistribute it and/or modify
//                              it under the terms of the GNU General Public License as published by
//                              the Free Software Foundation, either version 3 of the License, or
//                              (at your option) any later version.
//
//                              This program is distributed in the hope that it will be useful,
//                              but WITHOUT ANY WARRANTY; without even the implied warranty of
//                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                              GNU General Public License for more details.
//
//                              You should have received a copy of the GNU General Public License
//                              along with this program.  If not, see <https://www.gnu.org/licenses/>.
// -------------------------------------------------------------------------------------------------------------
//    email                   kenji.delarosa@alten.com
//    @file                   Test_DRE_science_debug_full_speed.dscript
// -------------------------------------------------------------------------------------------------------------
//    Automatic Generation    No
//    Code Rules Reference
// -------------------------------------------------------------------------------------------------------------
//    @details
//
//   This test does the following tests:
//      . test_science: test the science link without the DEMUX (full USB speed): debug mode.
//         . The FPGA architecture is as follows:
//            . DEMUX (ignored inputs) -> Science FIFO IN (ignored) -> DDR (ignored) -> science_pattern_fifo_out (enabled) -> Science FIFO out -> Xifu Studio
//            . So, the reduced architecture is:
//                . science_pattern_fifo_out (enabled) -> Science FIFO out -> Xifu Studio.
//         .The steps are:
//            . Enable the science pattern generator at the input of the science output FIFO.
//            . Infinite/Finite loop: Get statistics on the science link.
//   Note:
//      . Tested with javascript.
//
// -------------------------------------------------------------------------------------------------------------


// import javascript
include("./tmtc/utils_tools.dscript");
include("./tmtc/tmtc_tools.dscript");


/**
 * Test the science USB link full speed without the DEMUX (debug mode): Continuously read the science data from the science pattern generator.
 *   The steps are:
 *     . Enable the science pattern generator at the input of the science output FIFO
 *     . Infinite/finite loop: Get statistics on the science link.
 * @param {number} time_p - 0: infinite time, >=1: finite time
 * @param {number} level_p - level of indentation at the beginning.
 * @param {number} mode_p - define the print output.
 * @param {number} verbosity_p - level of verbosity.
 */
function test_science(time_p, level_p, mode_p, verbosity_p) {

  // default function parameter values
  if (typeof (level_p) === 'undefined') level_p = 0;
  if (typeof (mode_p) === 'undefined') mode_p = 0;
  if (typeof (verbosity_p) === 'undefined') verbosity_p = 0;

  //
  const level0 = level_p;
  const level1 = level_p + 1;
  const level2 = level_p + 2;

  /*
    TMTC: DEBUG_PULSE register.
   */
  // set the register: DEBUG_CTRL.
  science_pattern_en_fifo_out = 0x1; //0: normal mode, 1: science output fifo full speed
  rst_status = 0x0;
  debug_pulse = 0x0;
  msg = "Set register: DEBUG_CTRL";
  display(msg, level1, mode_p);
  tmtc_set_debug_ctrl(science_pattern_en_fifo_out, rst_status, debug_pulse, level1, mode_p);

  // infinite loop: Get statistics on the science USB link
  req = getNextValue("DMX_controlLink0,DMX_controlLink1,DMX_dataCol0,DRE_DataCol3,DRE_DataCol2,DRE_DataCol1,DRE_LinkCounterError,DISP_SubsystemsDataTransferred", "toutes les 1000 ms");
  cnt = 1; // count the number of seconds
  test = 1;
  while (test)
  {
    waitingForNextValue(req)
    clearLastLogLine()
    dataTransferred = DISP_SubsystemsDataTransferred[4] / 1024 / 1024 / 1024
    unit = "Go"
    if (dataTransferred > 1024)
    {
      unit = "To"
      dataTransferred = dataTransferred / 1024
    }
    print(dataTransferred.toPrecision(3) + " " + unit + " received, " + DRE_LinkCounterError + " errors detected, " + DMX_controlLink0, DMX_dataCol0, DRE_DataCol1, DRE_DataCol2, DRE_DataCol3);

  if (time_p >= 1)
  { // finite time
     if (cnt == time_p)
      {
        test = 0;
      }
      cnt +=1;
    }

  }

}

/**
 * Script Entry Point.
 * @param {number} level_p - level of indentation at the beginning.
 * @param {number} mode_p - define the print output.
 * @param {number} verbosity_p - level of verbosity.
 */
function main(level_p, mode_p, verbosity_p) {

  // default function parameter values
  if (typeof (level_p) === 'undefined') level_p = 0;
  if (typeof (mode_p) === 'undefined') mode_p = 0;
  if (typeof (verbosity_p) === 'undefined') verbosity_p = 0;

  const level0 = level_p;
  const level1 = level_p + 1;
  const level2 = level_p + 2;

  // script name
    script_name = "Test_DRE_science_debug_full_speed";

  /*
   ***************************************************************************
   * display the test description
   ***************************************************************************
   */
  msg = "tmtc Test Description: " + script_name + " (debug mode).";
  display_title(msg, level0, mode_p);

  msg = "Context and purpose of the test.";
  display_subtitle(msg, level1, mode_p);

  msg = [
    "This test (debug mode) allows testing the supported maximum speed of the science USB link (without DEMUX) by using data from the science pattern generator.",
    "The steps are:",
    "   . Enable the science pattern generator at the input of the science output FIFO.",
    "   . Infinite/finite loop: Get statistics on the science link."
  ];
  display(msg, level2, mode_p);

  msg = "";
  display(msg, level0, mode_p);

  /*
   ***************************************************************************
   * display the script info
   ***************************************************************************
  */
  error_info_cnt = 0;
  list_tmp       = tmtc_script_info(level1, mode_p, 2);
  error_info_cnt = list_tmp[0];
  info           = list_tmp[1];

  // build output filename
  output_filename = script_name + "__" + info + ".txt";

  // 1st Test to execute
  // str_en_science = getText("Test: Science USB full speed (0 or 1).", "0");
  str_en_science = "1";
  en_science = parseInt(str_en_science, 10);

  // define the time (~ expressed in seconds)
  str_time = getText("Define a Test time (0: infinite time, >=1: finite time (in s)).", "0");
  time_tmp = parseInt(str_time, 10);

  /*
   ***************************************************************************
   * Check: Science Link
   ***************************************************************************
   */
  if (en_science == 1)
  {
    msg = "Test: Run the science USB link full speed test (debug mode).";
    display_title(msg, level0, mode_p);
    test_science(time_tmp,level1, mode_p, verbosity_p);
  }


  /*
    ***************************************************************************
    * End of Test
    ***************************************************************************
    */
  msg = "End of Test.";
  display_title(msg, level0, mode_p);

  /*
    ***************************************************************************
    * Save the Log content
    ***************************************************************************
    */
  saveLogContent(output_filename);

}

/**
 * Execute the main function.
 * @param {number} level_p - level of indentation at the beginning.
 * @param {number} mode_p - define the print output.
 * @param {number} verbosity_p - level of verbosity.
 */
main(0, 0, 2);
