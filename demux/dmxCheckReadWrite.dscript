// -------------------------------------------------------------------------------------------------------------
//                              Copyright (C) 2022-2030 Laurent Ravera, IRAP Toulouse.
// -------------------------------------------------------------------------------------------------------------
//                              This file is part of the ATHENA X-IFU DRE SGSE tools.
//
//                              sgse tools javascripts are free software: you can redistribute it and/or modify
//                              it under the terms of the GNU General Public License as published by
//                              the Free Software Foundation, either version 3 of the License, or
//                              (at your option) any later version.
//
//                              This program is distributed in the hope that it will be useful,
//                              but WITHOUT ANY WARRANTY; without even the implied warranty of
//                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                              GNU General Public License for more details.
//
//                              You should have received a copy of the GNU General Public License
//                              along with this program.  If not, see <https://www.gnu.org/licenses/>.
// -------------------------------------------------------------------------------------------------------------
//    email                     laurent.ravera@irap.omp.eu
//    @file                     dmxCheckReadWrite.dscript
// -------------------------------------------------------------------------------------------------------------
//    @details
//
//    This file checks the low level commands of the dmx_tools to read/write the DEMUX registers.
//
// -------------------------------------------------------------------------------------------------------------

// imports
include("../demux/dmxTools.dscript");
include("../demux/dmxRegAddresses.dscript");
include("../demux/dmxHk.dscript");
include("../common/utilTools.dscript");
include("../common/constants.dscript");


/**
 * This function tests the demux commands
 */
function dmxCheckReadWrite() {

    var checked_value, checked_values;
    var value, values;
    const ARROW = "-----------------------------------------------> "
    const MESSAGE_ERROR = ARROW + " [ ERROR ]";
    const MESSAGE_OK = ARROW + " [  OK  ]";
    var MESSAGE;
    var ERROR_COUNTER = 0;

    /******************************************************************************************************************/
    plotLongLine();
	print("* Testing the read and write of the DEMUX registers...");
    print(maDate());
    plotLongLine();
    print("");


    /******************************************************************************************************************/
    plotLongLine();
    print("Reading the firmware version");
    const fwVersion = readDMX_firmwareVersion(true);


    /******************************************************************************************************************/
    plotLongLine();
    print("Reading the hardware version");
    readDMX_hardwareVersion(true);


    /******************************************************************************************************************/
    plotLongLine();
    print("Reading the delock flags");
    readDMX_delockFlag(true);


    /******************************************************************************************************************/
    plotLongLine();
    print("Writing / Reading the delock counters");

    for (var col=0; col<DMX_NB_COL; col++) {
        print(TAB1 + "Testing column " + col)

        print(TAB2 + "Initial values are: ");
        readDMX_delockCounters(col, true);

        values = makeArray(DMX_NB_PIX_PER_COL, 12);
        print(TAB2 + "Setting new values: " + values);
        setDMX_delockCounters(col, values);

        print(TAB2 + "Reading the new values from the firmware: ");
        checked_values = readDMX_delockCounters(col, true);

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB1 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Reading the housekeepings");
    readDMX_HK(true);


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the data acquisition mode:");

    print(TAB1 + "Initial value is: " + readDMX_dataAcqMode());

    value = 2;
    print(TAB1 + "Setting new value: " + value);
    setDMX_dataAcqMode(ACQ_MODE_ERROR);

    checked_value = readDMX_dataAcqMode();
    print(TAB1 + "Reading the new value from the firmware: " + checked_value);

    MESSAGE = MESSAGE_ERROR;
    if (checked_value === value) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of feedback on/off mode:");

    print(TAB1 + "Initial values are: " + readDMX_feedbackOnOff());

    values = [ON, OFF, OFF, ON];
    print(TAB1 + "Setting new values: " + values);
    setDMX_feedbackOnOff(values);

    checked_values = readDMX_feedbackOnOff();
    print(TAB1 + "Reading the new values from the firmware: " + checked_values);

    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of offset mode:");

    print(TAB1 + "Initial values are: " + readDMX_offsetMode());

    values = [3, 2, 1, 0];
    print(TAB1 + "Setting new values: " + values);
    setDMX_offsetMode(values);

    checked_values = readDMX_offsetMode();
    print(TAB1 + "Reading the new values: " + checked_values);

    MESSAGE = MESSAGE_ERROR;
    if (twoDArraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the definition of the test patterns:");

    print(TAB1 + "Initial values are: ");
    print(readDMX_testPattern());

    values = [[1024, 65535, 4, 2048],
        [-32768, 65535, 32767, 0],
        [1024, 65535, 4, 2048],
        [-32768, 65535, 32767, 0],
        [1024, 65535, 4, 2048]];
    print(TAB1 + "Setting new values: " + values);
    setDMX_testPattern(values);

    checked_values = readDMX_testPattern();
    print(TAB1 + "Reading the new values: ");
    print(checked_values);

    MESSAGE = MESSAGE_ERROR;
    if (twoDArraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the status of the test patterns:");

    print(TAB1 + "Initial values are: " + readDMX_testPatternEnable());

    values = [1, 0, 0x9];
    print(TAB1 + "Setting new values: " + values);
    setDMX_testPatternEnable(values[0], values[1], values[2]);

    checked_value = readDMX_testPatternEnable();
    print(TAB1 + "Reading the new values: " + checked_value);

    MESSAGE = MESSAGE_ERROR;
    if (ArraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the boxcar length:");

    print(TAB1 + "Initial values are: " + readDMX_boxcarLength());

    values = [0, 1, 2, 3];
    print(TAB1 + "Setting new values: " + values);
    setDMX_boxcarLength(values);

    checked_values = readDMX_boxcarLength();
    print(TAB1 + "Reading the new values: " + checked_values);

    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of feedback algo parameter A:");

    for (var col=0; col<DMX_NB_COL; col++) {
        print(TAB2 + "Testing column " + col);

        print(TAB2 + "Initial values are: " + readDMX_a(col));

        values = [DMX_NB_PIX_PER_COL];
        for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) values[pix] = pix;
        print(TAB2 + "Setting new values:" + values);
        setDMX_a(col, values);

        checked_values = readDMX_a(col);
        print(TAB2 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB2 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of ki.knorm for the MUX SQUID loop:");

    for (var col=0; col<DMX_NB_COL; col++) {
        print(TAB2 + "Testing column " + col);

        print(TAB2 + "Initial values are: " + readDMX_sqm_kiknorm(col));

        values = [DMX_NB_PIX_PER_COL];
        for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) values[pix] = pix*2+1;
        print(TAB2 + "Setting new values:" + values);
        setDMX_sqm_kiknorm(col, values);

        checked_values = readDMX_sqm_kiknorm(col);
        print(TAB2 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB2 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of knorm for the MUX SQUID loop:");

    for (var col=0; col<DMX_NB_COL; col++) {
        print(TAB2 + "Testing column " + col);

        print(TAB2 + "Initial values are: " + readDMX_sqm_knorm(col));

        values = [DMX_NB_PIX_PER_COL];
        for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) values[pix] = pix*2;
        print(TAB2 + "Setting new values:" + values);
        setDMX_sqm_knorm(col, values);

        checked_values = readDMX_sqm_knorm(col);
        print(TAB2 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB2 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the default feedback (FB0):");

    for (var col=0; col<DMX_NB_COL; col++) {
        print(TAB2 + "Testing column " + col);

        print(TAB2 + "Initial values are: " + readDMX_fb0(col));

        values = [DMX_NB_PIX_PER_COL];
        for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) values[pix] = pix*3;
        print(TAB2 + "Setting new values:" + values);
        setDMX_fb0(col, values);

        checked_values = readDMX_fb0(col);
        print(TAB2 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB2 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the feedback lockpoint:");

    for (var col=0; col<DMX_NB_COL; col++) {
        print(TAB2 + "Testing column " + col);

        print(TAB2 + "Initial values are: " + readDMX_lockpointV(col));

        values = [DMX_NB_PIX_PER_COL];
        for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) values[pix] = pix*3+1;
        print(TAB2 + "Setting new values:" + values);
        setDMX_lockpointV(col, values);

        checked_values = readDMX_lockpointV(col);
        print(TAB2 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB2 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the feedback mode:");

    for (var col=0; col<DMX_NB_COL; col++) {
        print(TAB2 + "Testing column " + col);

        print(TAB2 + "Initial values are: " + readDMX_sqm_FBMode(col));

        values = [DMX_NB_PIX_PER_COL];
        for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) values[pix] = pix%3;
        print(TAB2 + "Setting new values:" + values);
        setDMX_sqm_FBMode(col, values);

        checked_values = readDMX_sqm_FBMode(col);
        print(TAB2 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB2 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the weight of the LSB of the AMP SQUID offset (AMP_SQ_OFFSET_LSB):");

    values = [0x0ABA, 0x0000, 0x0F2F, 0x0666];
    checked_values = [DMX_NB_COL];

    for (var col=0; col<DMX_NB_COL; col++) {
        print(TAB2 + "Testing column " + col);

        print(TAB2 + "Initial value is: " + readDMX_sqa_OffsetLSB(col));

        print(TAB2 + "Setting new values:" + values);
        setDMX_sqa_OffsetLSB(col, values[col]);

        checked_values[col] = readDMX_sqa_OffsetLSB(col);
        print(TAB2 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB2 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the common coarse offset for the AMP SQUID (AMP_SQ_OFFSET_COARSE):");

    values = [0x0ABA, 0x0000, 0x0F2F, 0x0666];
    checked_values = [DMX_NB_COL];

    for (var col=0; col<DMX_NB_COL; col++) {
        print(TAB2 + "Testing column " + col);

        print(TAB2 + "Initial value is: " + readDMX_sqa_OffsetCoarse(col));

        print(TAB2 + "Setting new values:" + values);
        setDMX_sqa_OffsetCoarse(col, values[col]);

        checked_values[col] = readDMX_sqa_OffsetCoarse(col);
        print(TAB2 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB2 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the feedback delay (MUX_SQ_FB_DELAY):");

    values = [0x0ABA, 0x0000, 0x0F2F, 0x0666];
    checked_values = [DMX_NB_COL];

    for (var col=0; col<DMX_NB_COL; col++) {
        print(TAB2 + "Testing column " + col);

        print(TAB2 + "Initial value is: " + readDMX_feedback_delay(col));

        print(TAB2 + "Setting new values:" + values);
        setDMX_feedback_delay(col, values[col]);

        checked_values[col] = readDMX_feedback_delay(col);
        print(TAB2 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB2 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the offset/DAC delay (AMP_SQ_OFFSET_DAC_DELAY):");

    values = [0, 11, 777, 1023];
    checked_values = [DMX_NB_COL];

    for (var col=0; col<DMX_NB_COL; col++) {
        print(TAB2 + "Testing column " + col);

        print(TAB2 + "Initial value is: " + readDMX_offsetDAC_delay(col));

        print(TAB2 + "Setting new values:" + values);
        setDMX_offsetDAC_delay(col, values[col]);

        checked_values[col] = readDMX_offsetDAC_delay(col);
        print(TAB2 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB2 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the offset/MUX delay (AMP_SQ_OFFSET_MUX_DELAY):");

    values = [-512, 0, 10, 40];
    checked_values = [DMX_NB_COL];

    for (var col=0; col<DMX_NB_COL; col++) {
        print(TAB2 + "Testing column " + col);

        print(TAB2 + "Initial value is: " + readDMX_offsetMUX_delay(col));

        print(TAB2 + "Setting new values:" + values);
        setDMX_offsetMUX_delay(col, values[col]);

        checked_values[col] = readDMX_offsetMUX_delay(col);
        print(TAB2 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB2 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the sampling delay (SAMPLING_DELAY):");

    values = [0, 5, 10, 19];
    checked_values = [DMX_NB_COL];

    for (var col=0; col<DMX_NB_COL; col++) {
        print(TAB2 + "Testing column " + col);

        print(TAB2 + "Initial value is: " + readDMX_sampling_delay(col));

        print(TAB2 + "Setting new values:" + values);
        setDMX_sampling_delay(col, values[col]);

        checked_values[col] = readDMX_sampling_delay(col);
        print(TAB2 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB2 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the values of a pulse shaping set (PULSE_SHAPING):");

    print(TAB1 + "Initial values are: ");
    print(readDMX_pulseShaping());

    values = [
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
        [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 1, 2, 3, 4],
        [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        [15, 16, 17, 18, 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
    ];
    print(TAB1 + "Setting new values: ");
    print(values);
    setDMX_boxcarLength(values);

    checked_values = readDMX_boxcarLength();
    print(TAB1 + "Reading the new values: " + checked_values);

    MESSAGE = MESSAGE_ERROR;
    if (twoDArraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the selection of a pulse shaping set (PULSE_SHAPING_SELECTION):");

    checked_values = [4];
    for (var col=0; col<DMX_NB_COL; col++) checked_values[col] = readDMX_pulseShapingSelection(col);
    print(TAB1 + "Initial values are: " + checked_values);

    values = [0, 1, 2, 3];
    print(TAB1 + "Setting new values: " + values);
    for (var col=0; col<DMX_NB_COL; col++) setDMX_pulseShapingSelection(col, values[col]);

    for (var col=0; col<DMX_NB_COL; col++) checked_values[col] = readDMX_pulseShapingSelection(col);
    print(TAB1 + "Reading the new values: " + checked_values);

    MESSAGE = MESSAGE_ERROR;
    if (ArraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the relock delay (RELOCK_DELAY):");

    checked_values = [4];
    for (var col=0; col<DMX_NB_COL; col++) checked_values[col] = readDMX_relock_delay(col);
    print(TAB1 + "Initial values are: " + checked_values);

    values = [0, 0x6666, 0xABBA, 0xFFFF];
    print(TAB1 + "Setting new values: " + values);
    for (var col=0; col<DMX_NB_COL; col++) setDMX_relock_delay(col, values[col]);

    checked_values = [4];
    for (var col=0; col<DMX_NB_COL; col++) checked_values[col] = readDMX_relock_delay(col);
    print(TAB1 + "Reading the new values: " + checked_values);

    MESSAGE = MESSAGE_ERROR;
    if (ArraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the relock threshold (RELOCK_THRESHOLD):");

    checked_values = [4];
    for (var col=0; col<DMX_NB_COL; col++) checked_values[col] = readDMX_relock_threshold(col);
    print(TAB1 + "Initial values are: " + checked_values);

    values = [0, 0x6666, 0xABBA, 0xFFFF];
    print(TAB1 + "Setting new values: " + values);
    for (var col=0; col<DMX_NB_COL; col++) setDMX_relock_threshold(col, values[col]);

    checked_values = [4];
    for (var col=0; col<DMX_NB_COL; col++) checked_values[col] = readDMX_relock_threshold(col);
    print(TAB1 + "Reading the new values: " + checked_values);

    MESSAGE = MESSAGE_ERROR;
    if (ArraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    /* Checking registers which are not implemented in firmware version 2
    /******************************************************************************************************************/

    if (fwVersion > 2) {

        /**************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of the input gain:");

        checked_values = [4];
        for (var col=0; col<DMX_NB_COL; col++) checked_values[col] = readDMX_sqm_inputGain(col);
        print(TAB1 + "Initial values are: " + checked_values);

        values = [0x0007, 0x0004, 0x000F, 0x0000];
        print(TAB1 + "Setting new values: " + values);
        for (var col=0; col<DMX_NB_COL; col++) setDMX_sqm_inputGain(col, values[col]);

        checked_values = [4];
        for (var col=0; col<DMX_NB_COL; col++) checked_values[col] = readDMX_sqm_inputGain(col);
        print(TAB1 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (ArraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB1 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


        /**************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of the input gain for AMP SQUID loop:");

        checked_values = [4];
        for (var col=0; col<DMX_NB_COL; col++) checked_values[col] = readDMX_sqa_inputGain(col);
        print(TAB1 + "Initial values are: " + checked_values);

        values = [0x0007, 0x0004, 0x000F, 0x0000];
        print(TAB1 + "Setting new values: " + values);
        for (var col=0; col<DMX_NB_COL; col++) setDMX_sqa_inputGain(col, values[col]);

        checked_values = [4];
        for (var col=0; col<DMX_NB_COL; col++) checked_values[col] = readDMX_sqa_inputGain(col);
        print(TAB1 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (ArraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB1 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


        /**************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of ki.knorm for the AMP SQUID loop:");

        checked_values = [4];
        for (var col=0; col<DMX_NB_COL; col++) checked_values[col] = readDMX_sqa_kiknorm(col);
        print(TAB1 + "Initial values are: " + checked_values);

        values = [0xBABA, 0x0000, 0x2F2F, 0x6666];
        print(TAB1 + "Setting new values: " + values);
        for (var col=0; col<DMX_NB_COL; col++) setDMX_sqa_kiknorm(col, values[col]);

        checked_values = [4];
        for (var col=0; col<DMX_NB_COL; col++) checked_values[col] = readDMX_sqa_kiknorm(col);
        print(TAB1 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (ArraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB1 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


        /******************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of knorm for the AMP SQUID loop:");

        checked_values = [4];
        for (var col=0; col<DMX_NB_COL; col++) checked_values[col] = readDMX_sqa_knorm(col);
        print(TAB1 + "Initial values are: " + checked_values);

        values = [0xBABA, 0x0000, 0x2F2F, 0x6666];
        print(TAB1 + "Setting new values: " + values);
        for (var col=0; col<DMX_NB_COL; col++) setDMX_sqa_knorm(col, values[col]);

        checked_values = [4];
        for (var col=0; col<DMX_NB_COL; col++) checked_values[col] = readDMX_sqa_knorm(col);
        print(TAB1 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (ArraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB1 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


        /**************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of the LSB of the AMP SQUID offset (AMP_SQ_OFFSET_FINE):");

        for (var col=0; col<DMX_NB_COL; col++) {
            print(TAB1 + "Testing column " + col);

            checked_values = readDMX_sqa_OffsetFine(col);
            print(TAB2 + "Initial values are: ");
            print(checked_values[0]);
            print(checked_values[1]);

            var values0 = [DMX_NB_PIX_PER_COL];
            var values1 = [DMX_NB_PIX_PER_COL];
            for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) {
                values0[pix] = pix % 7;
                print(TAB2 + "Pixel " + pix + ": offset fine (STD) = " + values0[pix]);
                values1[pix] = (pix + 3) % 7;
                print(TAB2 + "Pixel " + pix + ": offset fine (PTR) = " + values1[pix]);
            }
            print(TAB1 + "Setting new values: ");
            print(values0);
            print(values1);
            setDMX_sqa_OffsetFine(col, values0, values1);

            checked_values = readDMX_sqa_OffsetFine(col);
            print(TAB1 + "Reading the new values: " + checked_values);
            print(checked_values[0]);
            print(checked_values[1]);

            MESSAGE = MESSAGE_ERROR;
            if (ArraysAreEquals(values0, checked_values0) && ArraysAreEquals(values1, checked_values1)) MESSAGE = MESSAGE_OK;
            print(TAB1 + MESSAGE);
            if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
        }


        /**************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of the weight of the LSB of the AMP SQUID offset for test patterns (AMP_SQ_OFFSET_LSB_PTR):");

        checked_values = [4];
        for (var col=0; col<DMX_NB_COL; col++) checked_values[col] = readDMX_sqa_OffsetLSBptr(col);
        print(TAB1 + "Initial values are: " + checked_values);

        values = [0xBABA, 0x0000, 0x2F2F, 0x6666];
        print(TAB1 + "Setting new values: " + values);
        for (var col=0; col<DMX_NB_COL; col++) setDMX_sqa_OffsetLSBptr(col, values[col]);

        checked_values = [4];
        for (var col=0; col<DMX_NB_COL; col++) checked_values[col] = readDMX_sqa_OffsetLSBptr(col);
        print(TAB1 + "Reading the new values: " + checked_values);

        MESSAGE = MESSAGE_ERROR;
        if (ArraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB1 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;

    }


    /******************************************************************************************************************/
    plotLongLine();
    if (ERROR_COUNTER === 1) print("Oups, " + ERROR_COUNTER + " error has been detected!");
    else    if (ERROR_COUNTER > 1) print("Oups, " + ERROR_COUNTER + " errors have been detected!");
            else print("Nice, no error detected");

    /******************************************************************************************************************/
    plotLongLine();
}