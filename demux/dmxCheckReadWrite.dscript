// -------------------------------------------------------------------------------------------------------------
//                              Copyright (C) 2022-2030 Laurent Ravera, IRAP Toulouse.
// -------------------------------------------------------------------------------------------------------------
//                              This file is part of the ATHENA X-IFU DRE SGSE tools.
//
//                              sgse tools javascripts are free software: you can redistribute it and/or modify
//                              it under the terms of the GNU General Public License as published by
//                              the Free Software Foundation, either version 3 of the License, or
//                              (at your option) any later version.
//
//                              This program is distributed in the hope that it will be useful,
//                              but WITHOUT ANY WARRANTY; without even the implied warranty of
//                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                              GNU General Public License for more details.
//
//                              You should have received a copy of the GNU General Public License
//                              along with this program.  If not, see <https://www.gnu.org/licenses/>.
// -------------------------------------------------------------------------------------------------------------
//    email                     laurent.ravera@irap.omp.eu
//    @file                     dmxCheckReadWrite.dscript
// -------------------------------------------------------------------------------------------------------------
//    @details
//
//    This file checks the low level commands of the dmx_tools to read/write the DEMUX registers.
//
// -------------------------------------------------------------------------------------------------------------

// imports
include("../demux/dmx_tools.dscript");

/**
 * This function tests the demux commands
 */
function dmxCheckReadWrite() {

    const colId = 2;
    var checked_value, checked_values;
    var value, values;
    const ARROW = "-----------------------------------------------> "
    const MESSAGE_ERROR = ARROW + " [ ERROR ]";
    const MESSAGE_OK = ARROW + " [  OK  ]";
    var MESSAGE;
    var ERROR_COUNTER = 0;

    /******************************************************************************************************************/
    plotLongLine();
	print("Testing the read / write of the DEMUX registers...");
    print(maDate());
    plotLongLine();
    print("");


    /******************************************************************************************************************/
    plotLongLine();
    print("Reading the firmware version");
    const fwVersion = readDMX_firmwareVersion(true);
    if (fwVersion === 2) print(TAB1 + MESSAGE_OK);
	else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Reading the hardware version");
    const hwVersion = readDMX_hardwareVersion(true);
	const modelReference = hwVersion[0];
	const boardReference = hwVersion[1];
    if (doesArrayInclude([0, 1, 2, 3, 7], modelReference) && boardReference === 0)  print(TAB1 + MESSAGE_OK);
	else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Reading the delock flag");
    var delockflag = readDMX_delockFlag(true);


    /******************************************************************************************************************/
    plotLongLine();
    print("Reading the housekeepings");
    var housekeepings = readDMX_HK(true);


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the data acquisition mode:");
    print(TAB1 + "Setting a new value: " + ACQ_MODE_ERROR);
    setDMX_dataAcqMode(ACQ_MODE_ERROR);
    checked_value = readDMX_dataAcqMode();
    print(TAB1 + "Reading the new value: " + checked_value);

    MESSAGE = MESSAGE_ERROR;
    if (checked_value === ACQ_MODE_ERROR) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of feedback on/off mode:");
    print(TAB1 + "Setting new values:")
    values = [ON, OFF, OFF, ON];
    value = 0;
    for (var col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": --> " + to_hexaString(values[col]));
        value = value + (values[col] << 4 * col);
    }
    setDMX_feedbackOnOff(values);
    print(TAB1 + "Reading the new values:");
    checked_value = readDMX_feedbackOnOff();

    MESSAGE = MESSAGE_ERROR;
    if (checked_value === value) MESSAGE = MESSAGE_OK;
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": --> " + to_hexaString(checked_value % Math.pow(2, 4)));
        checked_value = checked_value >> 4;
    }
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of offset mode:");
    print(TAB1 + "Setting new values:")
    values = [OFFSET_MODE_OFF, OFFSET_MODE_OFFSET, OFFSET_MODE_CLOSED, OFFSET_MODE_TESTPATTERN];
    value = 0;
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": --> " + to_hexaString(values[col]));
        value = value + (values[col] << 4 * col);
    }
    setDMX_offsetMode(values);
    print(TAB1 + "Reading the new values:");
    checked_value = readDMX_offsetMode();

    MESSAGE = MESSAGE_ERROR;
    if (checked_value === value) MESSAGE = MESSAGE_OK;
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": --> " + to_hexaString(checked_value % Math.pow(2, 4)));
        checked_value = checked_value >> 4;
    }
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the definition of the test patterns:");

    print(TAB1 + "Setting new values for the 5 regions of the pattern...")
    values = [[0xAAAA, 0xBBBB, 0xCCCC, 0x17F0],
        [0x1111, 0x2222, 0x3333, 0x4444],
        [0x5555, 0x6666, 0x7777, 0x8888],
        [0x1234, 0x5678, 0x9ABC, 0xDEFF],
        [0x1133, 0x2244, 0x5577, 0x6688]];
    for (region=0; region<DMX_TEST_PATTERN_NBREGIONS; region++) {
        print(TAB2 + "Region " + region + ": " + values[region]);
    }
    setDMX_testPattern(values);
    print(TAB1 + "Reading the new values...");
    checked_values = readDMX_testPattern();
    for (region=0; region<DMX_TEST_PATTERN_NBREGIONS; region++) {
        print(TAB2 + "Region " + region + ": " + checked_values[region]);
    }

    MESSAGE = MESSAGE_ERROR;
    if (twoDArraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the status of the test patterns:");
    var enable = true;
    var infinitely = false;
    var nbTime = 0x9;
    print(TAB1 + "Setting new values:")
    print(TAB2 + "Enable           = " + enable);
    print(TAB2 + "Infinitely         = " + infinitely);
    print(TAB2 + "Number times = " + nbTime);
    setDMX_testPatternEnable(enable, infinitely, nbTime);
    print(TAB1 + "Reading the new values:");
    checked_value = readDMX_testPatternEnable();
    print(TAB2 + "Enable           = " + checked_value[0]);
    print(TAB2 + "Infinitely         = " + checked_value[1]);
    print(TAB2 + "Number times = " + checked_value[2]);

    MESSAGE = MESSAGE_ERROR;
    if (checked_value[0] === enable && checked_value[1] === infinitely && checked_value[2] === nbTime) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the boxcar length:");
    print(TAB1 + "Setting new values:")
    var boxcarL = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        boxcarL[col] = (col + 1) * 2;
        print(TAB2 + "Column " + col + " --> " + boxcarL[col]);
    }
    setDMX_boxcarLength(boxcarL);
    print(TAB1 + "Reading the new values:");
    checked_value = readDMX_boxcarLength();
    for (col = 0; col < DMX_NB_COL; col++) print(TAB2 + "Column " + col + " --> " + checked_value[col]);

    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(boxcarL, checked_value)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of feedback algo parameter A:");
    print(TAB1 + "Setting new values:")
    values = [DMX_NB_PIX_PER_COL];
    for (var pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) values[pix] = pix * 2 + 1;
    printArrayInSlices(values, TAB2, 10);
    setDMX_a(colId, values);
    print(TAB1 + "Reading the new values:");
    checked_values = readDMX_a(colId);
    printArrayInSlices(checked_values, TAB2, 10);

    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of ki.knorm for the MUX SQUID loop:");
    print(TAB1 + "Setting new values:")
    values = [DMX_NB_PIX_PER_COL];
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) values[pix] = pix * 2 + 1;
    printArrayInSlices(values, TAB2, 10);
    setDMX_sqm_kiknorm(colId, values);
    print(TAB1 + "Reading the new values:");
    checked_values = readDMX_sqm_kiknorm(colId);
    printArrayInSlices(checked_values, TAB2, 10);

    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of knorm for the MUX SQUID loop:");
    print(TAB1 + "Setting new values:")
    values = [DMX_NB_PIX_PER_COL];
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) values[pix] = pix * 2 + 1;
    printArrayInSlices(values, TAB2, 10);
    setDMX_sqm_knorm(colId, values);
    print(TAB1 + "Reading the new values:");
    checked_values = readDMX_sqm_knorm(colId);
    printArrayInSlices(checked_values, TAB2, 10);

    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the default feedback (FB0):");
    print(TAB1 + "Setting new values:")
    values = [DMX_NB_PIX_PER_COL];
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) values[pix] = pix * 2 + 1;
    printArrayInSlices(values, TAB2, 10);
    setDMX_fb0(colId, values);
    print(TAB1 + "Reading the new values:");
    checked_values = readDMX_fb0(colId);
    printArrayInSlices(checked_values, TAB2, 10);

    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the feedback lockpoint:");
    print(TAB1 + "Setting new values:")
    values = [DMX_NB_PIX_PER_COL];
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) values[pix] = pix * 2 + 1;
    printArrayInSlices(values, TAB2, 10);
    setDMX_lockpointV(colId, values);
    print(TAB1 + "Reading the new values:");
    checked_values = readDMX_lockpointV(colId);
    printArrayInSlices(checked_values, TAB2, 10);

    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the feedback mode:");
    print(TAB1 + "Setting new values:")
    values = [DMX_NB_PIX_PER_COL];
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) values[pix] = pix % 3;
    printArrayInSlices(values, TAB2, 10);
    setDMX_sqm_FBMode(colId, values);
    print(TAB1 + "Reading the new values:");
    checked_values = readDMX_sqm_FBMode(colId);
    printArrayInSlices(checked_values, TAB2, 10);

    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the weight of the LSB of the AMP SQUID offset (AMP_SQ_OFFSET_LSB):");
    print(TAB1 + "Setting new values:")
    values = [0x0ABA, 0x0000, 0x0F2F, 0x0666];
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": LSB weight for offset = " + values[col]);
        setDMX_sqa_OffsetLSB(col, values[col]);
    }
    print(TAB1 + "Reading the new values:");
    checked_values = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_sqa_OffsetLSB(col);
        print(TAB2 + "Column " + col + ": LSB weight for offset = " + checked_values[col]);
    }

    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the common coarse offset for the AMP SQUID (AMP_SQ_OFFSET_COARSE):");
    print(TAB1 + "Setting new values:")
    values = [0x0ABA, 0x0000, 0x0F2F, 0x0666];
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": offset coarse = " + values[col]);
        setDMX_sqa_OffsetCoarse(col, values[col]);
    }
    print(TAB1 + "Reading the new values:");
    checked_values = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_sqa_OffsetCoarse(col);
        print(TAB2 + "Column " + col + ": offset coarse = " + checked_values[col]);
    }

    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the feedback delay (MUX_SQ_FB_DELAY):");
    print(TAB1 + "Setting new values:")
    values = [-512, 0, 10, 40];
    checked_values = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": feedback delay = " + values[col]);
        setDMX_feedback_delay(col, values[col]);
    }
    print(TAB1 + "Reading the new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_feedback_delay(col);
        print(TAB2 + "Column " + col + ": feedback delay = " + checked_values[col]);
    }

    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the offset/DAC delay (AMP_SQ_OFFSET_DAC_DELAY):");
    print(TAB1 + "Setting new values:")
    values = [0, 11, 777, 1023];
    checked_values = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": offset/DAC delay = " + values[col]);
        setDMX_offsetDAC_delay(col, values[col]);
    }
    print(TAB1 + "Reading the new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_offsetDAC_delay(col);
        print(TAB2 + "Column " + col + ": offset/DAC delay = " + checked_values[col]);
    }

    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the offset/MUX delay (AMP_SQ_OFFSET_MUX_DELAY):");
    print(TAB1 + "Setting new values:")
    values = [-512, 0, 10, 40];
    checked_values = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": offset/MUX delay = " + values[col]);
        setDMX_offsetMUX_delay(col, values[col]);
    }
    print(TAB1 + "Reading the new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_offsetMUX_delay(col);
        print(TAB2 + "Column " + col + ": offset/MUX delay = " + checked_values[col]);
    }

    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the sampling delay (SAMPLING_DELAY):");
    print(TAB1 + "Setting new values:")
    values = [0, 5, 10, 19];
    checked_values = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": sampling delay = " + values[col]);
        setDMX_sampling_delay(col, values[col]);
    }
    print(TAB1 + "Reading the new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_sampling_delay(col);
        print(TAB2 + "Column " + col + ": sampling delay = " + checked_values[col]);
    }

    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the values of a pulse shaping set (PULSE_SHAPING):");
    print(TAB1 + "Setting new values for column " + colId);
    values = [
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
        [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 1, 2, 3, 4],
        [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        [15, 16, 17, 18, 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
    ]
    for (var set=0; set<4; set++) print(TAB2 + "Set " + set + ": " + values[set]);
    setDMX_pulseShaping(colId, values);
    print(TAB1 + "Reading the new values:");
    checked_values = readDMX_pulseShaping(colId);
    for (set=0; set<4; set++) print(TAB2 + "Set " + set + ": " + checked_values[set]);

    MESSAGE = MESSAGE_ERROR;
    if (twoDArraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the selection of a pulse shaping set (PULSE_SHAPING_SELECTION):");
    print(TAB1 + "Setting new values:")
    values = [0, 1, 2, 3];
    checked_values = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": pulse shaping set = " + values[col]);
        setDMX_pulseShapingSelection(col, values[col]);
    }
    print(TAB1 + "Reading the new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_pulseShapingSelection(col);
        print(TAB2 + "Column " + col + ": pulse shaping set = " + checked_values[col]);
    }
    
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the relock delay (RELOCK_DELAY):");
    print(TAB1 + "Setting new values:")
    values = [0, 0x6666, 0xABBA, 0xFFFF];
    checked_values = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": relock delay = " + values[col]);
        setDMX_relock_delay(col, values[col]);
    }
    print(TAB1 + "Reading the new values:");
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_relock_delay(col);
        print(TAB2 + "Column " + col + ": relock delay = " + checked_values[col]);
    }
    
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the relock threshold (RELOCK_THRESHOLD):");
    print(TAB1 + "Setting new values:")

    values = [0, 0x6666, 0xABBA, 0xFFFF];
    checked_values = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": relock threshold = " + values[col]);
        setDMX_relock_threshold(col, values[col]);
    }
    print(TAB1 + "Reading the new values:");
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_relock_threshold(col);
        print(TAB2 + "Column " + col + ": relock threshold = " + checked_values[col]);
    }
    
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


    /******************************************************************************************************************/
    /* Checking registers which are not implemented in firmware version 2
    /******************************************************************************************************************/

    if (fwVersion > 2) {

        /**************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of the input gain:");
        print(TAB1 + "Setting new values:")
        values = [0x0007, 0x0004, 0x000F, 0x0000];
        for (col = 0; col < DMX_NB_COL; col++) {
            print(TAB2 + "Column " + col + ": " + values[col]);
            setDMX_sqm_inputGain(col, values[col]);
        }
        print(TAB1 + "Reading the new values:");
        checked_values = [DMX_NB_COL];
        for (col = 0; col < DMX_NB_COL; col++) {
            checked_values[col] = readDMX_sqm_inputGain(col);
            print(TAB2 + "Column " + col + ": " + checked_values[col]);
        }

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB1 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


        /**************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of the input gain for AMP SQUID loop:");
        print(TAB1 + "Setting new values:")
        values = [0x0007, 0x0004, 0x000F, 0x0000];
        for (col = 0; col < DMX_NB_COL; col++) {
            print(TAB2 + "Column " + col + ": " + values[col]);
            setDMX_sqa_inputGain(col, values[col]);
        }
        print(TAB1 + "Reading the new values:");
        checked_values = [DMX_NB_COL];
        for (col = 0; col < DMX_NB_COL; col++) {
            checked_values[col] = readDMX_sqa_inputGain(col);
            print(TAB2 + "Column " + col + ": " + checked_values[col]);
        }

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB1 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


        /**************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of ki.knorm for the AMP SQUID loop:");
        print(TAB1 + "Setting new values:")
        values = [0xBABA, 0x0000, 0x2F2F, 0x6666];
        for (col = 0; col < DMX_NB_COL; col++) {
            print(TAB2 + "Column " + col + ": kiknorm = " + to_hexaString(values[col]));
            setDMX_sqa_kiknorm(col, values[col]);
        }
        print(TAB1 + "Reading the new values:");
        checked_values = [DMX_NB_COL];
        for (col = 0; col < DMX_NB_COL; col++) {
            checked_values[col] = readDMX_sqa_kiknorm(col);
            print(TAB2 + "Column " + col + ": kiknorm = " + to_hexaString(checked_values[col]));
        }

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB1 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


        /******************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of knorm for the AMP SQUID loop:");
        print(TAB1 + "Setting new values:")
        values = [0xBABA, 0x0000, 0x2F2F, 0x6666];
        for (col = 0; col < DMX_NB_COL; col++) {
            print(TAB2 + "Column " + col + ": knorm = " + to_hexaString(values[col]));
            setDMX_sqa_knorm(col, values[col]);
        }
        print(TAB1 + "Reading the new values:");
        checked_values = [DMX_NB_COL];
        for (col = 0; col < DMX_NB_COL; col++) {
            checked_values[col] = readDMX_sqa_knorm(col);
            print(TAB2 + "Column " + col + ": knorm = " + to_hexaString(checked_values[col]));
        }

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB1 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


        /**************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of the LSB of the AMP SQUID offset (AMP_SQ_OFFSET_FINE):");
        print(TAB1 + "Setting new values:")
        var values0 = [DMX_NB_PIX_PER_COL];
        var values1 = [DMX_NB_PIX_PER_COL];
        for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) {
            values0[pix] = pix % 7;
            print(TAB2 + "Pixel " + pix + ": offset fine (STD) = " + values0[pix]);
            values1[pix] = (pix + 3) % 7;
            print(TAB2 + "Pixel " + pix + ": offset fine (PTR) = " + values1[pix]);
        }
        setDMX_sqa_OffsetFine(colId, values0, values1);
        print(TAB1 + "Reading the new values:");
        checked_values = readDMX_sqa_OffsetFine(colId);
        for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) {
            print(TAB2 + "Pixel " + pix + ": offset fine (STD) = " + checked_values[0][pix]);
            print(TAB2 + "Pixel " + pix + ": offset fine (PTR) = " + checked_values[1][pix]);
        }

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values0, checked_values[0]) && arraysAreEquals(values1, checked_values[1])) MESSAGE = MESSAGE_OK;
        print(TAB1 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;


        /**************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of the weight of the LSB of the AMP SQUID offset for test patterns (AMP_SQ_OFFSET_LSB_PTR):");
        print(TAB1 + "Setting new values:")
        values = [0x0ABA, 0x0000, 0x0F2F, 0x0666];
        for (col = 0; col < DMX_NB_COL; col++) {
            print(TAB2 + "Column " + col + ": LSB weight for offset (test pattern) = " + values[col]);
            setDMX_sqa_OffsetLSBptr(col, values[col]);
        }
        print(TAB1 + "Reading the new values:");
        checked_values = [DMX_NB_COL];
        for (col = 0; col < DMX_NB_COL; col++) {
            checked_values[col] = readDMX_sqa_OffsetLSBptr(col);
            print(TAB2 + "Column " + col + ": LSB weight for offset (test pattern) = " + checked_values[col]);
        }

        MESSAGE = MESSAGE_ERROR;
        if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
        print(TAB1 + MESSAGE);
        if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;

    }


    /******************************************************************************************************************/
    plotLongLine();
    if (ERROR_COUNTER === 1) print("Oups, " + ERROR_COUNTER + " error has been detected!");
    else    if (ERROR_COUNTER > 1) print("Oups, " + ERROR_COUNTER + " errors have been detected!");
            else print("Nice, no error detected");

    /******************************************************************************************************************/
    plotLongLine();
}