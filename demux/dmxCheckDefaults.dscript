// -------------------------------------------------------------------------------------------------------------
//                              Copyright (C) 2022-2030 Laurent Ravera, IRAP Toulouse.
// -------------------------------------------------------------------------------------------------------------
//                              This file is part of the ATHENA X-IFU DRE SGSE tools.
//
//                              sgse tools javascripts are free software: you can redistribute it and/or modify
//                              it under the terms of the GNU General Public License as published by
//                              the Free Software Foundation, either version 3 of the License, or
//                              (at your option) any later version.
//
//                              This program is distributed in the hope that it will be useful,
//                              but WITHOUT ANY WARRANTY; without even the implied warranty of
//                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                              GNU General Public License for more details.
//
//                              You should have received a copy of the GNU General Public License
//                              along with this program.  If not, see <https://www.gnu.org/licenses/>.
// -------------------------------------------------------------------------------------------------------------
//    email                     laurent.ravera@irap.omp.eu
//    @file                     dmxCheckDefaults.dscript
// -------------------------------------------------------------------------------------------------------------
//    @details
//
//    This file checks the low level commands of the dmx_tools to read the default values of the DEMUX registers.
//
// -------------------------------------------------------------------------------------------------------------

// imports
include("../demux/dmxTools.dscript");
include("../demux/dmxRegAddresses.dscript");
include("../demux/dmxHk.dscript");
include("../common/utilTools.dscript");
include("../common/constants.dscript");

const NB_PIX_EMPTY_ARRAY = makeArray(DMX_NB_PIX_PER_COL, 0x0000);

/**
 * This function tests the demux commands
 */
function dmxCheckDefaults() {

	const verbose = true;
    var checked_value, checked_values;
    const ARROW = "-----------------------------------------------> "
    const MESSAGE_ERROR = ARROW + " [ ERROR ]";
    const MESSAGE_OK = ARROW + " [  OK  ]";
    var ERROR_COUNTER = 0;

    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the functions of the dmxTools.dscript library to read the default values of the DEMUX registers...");
    print(maDate());
    plotLongLine();
    print("");


    /******************************************************************************************************************/
    plotLongLine();
    print("Reading the firmware version");
    const fwVersion = readDMX_firmwareVersion(true);

    /******************************************************************************************************************/
    plotLongLine();
    print("Reading the hardware version");
    readDMX_hardwareVersion(true);


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the data acquisition mode (DATA_ACQ_MODE)");
    print(TAB1 + "Expected value is 0");
    var dataAcqMode = readDMX_dataAcqMode();
    print(TAB1 + "Current value is: " + dataAcqMode);
    if (dataAcqMode === 0) print(TAB1 + MESSAGE_OK);
    else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of feedback on/off mode (MUX_SQ_FB_ON_OFF):");
    print(TAB1 + "Expected values are: ");
    for (var col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": --> " + 0);
    }
    var feedbackOnOff = readDMX_feedbackOnOff();
    var feedbackOnOff2 = feedbackOnOff;
    print(TAB1 + "Current values are: ");
    for (var col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": --> " + to_hexaString(feedbackOnOff % Math.pow(2, 4)));
        feedbackOnOff = feedbackOnOff >> 4;
    }
    if (feedbackOnOff2 === 0) print(TAB1 + MESSAGE_OK);
    else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of offset mode (AMP_SQ_OFFSET_MODE):");
    print(TAB1 + "Expected values are: ");
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": --> " + 0);
    }
    print(TAB1 + "Current values are: ");
    var offsetMode = readDMX_offsetMode();
    var offsetMode2 = offsetMode;
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": --> " + to_hexaString(offsetMode % Math.pow(2, 4)));
        offsetMode = offsetMode >> 4;
    }
    if (offsetMode2 === 0) print(TAB1 + MESSAGE_OK);
    else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the definition of the test pattern (TEST_PATTERN):");
    print(TAB1 + "Expected values are: ");
    const expTestPattern = [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]
    for (region=0; region<DMX_TEST_PATTERN_NBREGIONS; region++) {
        print(TAB2 + "Region " + region + ": " + expTestPattern[region]);
    }
    print(TAB1 + "Current values are: ");
    var testPattern = readDMX_testPattern();
    for (region=0; region<DMX_TEST_PATTERN_NBREGIONS; region++) {
        print(TAB2 + "Region " + region + ": " + testPattern[region]);
    }
    if (twoDArraysAreEquals(testPattern, expTestPattern)) print(TAB1 + MESSAGE_OK);
    else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the status of the test patterns (TEST_PATTERN_ENABLE):");
    print(TAB1 + "Expected values are: ");
    print(TAB2 + "Enable           = " + false);
    print(TAB2 + "Infinitely         = " + false);
    print(TAB2 + "Number times = " + 0);
    print(TAB1 + "Current values are: ");
    var testPatternEnable = readDMX_testPatternEnable();
    print(TAB2 + "Enable           = " + testPatternEnable[0]);
    print(TAB2 + "Infinitely         = " + testPatternEnable[1]);
    print(TAB2 + "Number times = " + testPatternEnable[2]);
    if (arraysAreEquals(testPatternEnable, [false, false, 0])) print(TAB1 + MESSAGE_OK);
    else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the boxcar length (BOXCAR_LENGTH)");
    print(TAB1 + "Expected value are 0, 0, 0, 0");
    const boxcarLength = readDMX_boxcarLength();
    print(TAB1 + "Current value are " + boxcarLength);
    if (arraysAreEquals(boxcarLength, [0, 0, 0, 0])) print(TAB1 + MESSAGE_OK);
    else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of feedback algo parameter A (A)");
    expA = [];
    for (var i=0; i<DMX_NB_PIX_PER_COL; i++) expA[i] = 0x3333;
    print(TAB1 + "Expected values for all the columns are: ");
    printArrayInSlices(expA, TAB2, 10);
    var A_OK = true;
    var a;
    for (col=0; col<DMX_NB_COL; col++) {
        a = readDMX_a(col);
        print(TAB1 + "Checking current values for column " + col + ":")

		if (verbose) print(a);
        if (arraysAreEquals(a, expA)) print(TAB1 + MESSAGE_OK);
        else {
            print(TAB1 + MESSAGE_ERROR);
            A_OK = false;
        }
    }
    if (!A_OK) ERROR_COUNTER++

	/******************************************************************************************************************/

	plotLongLine();
	print("Testing the setting of ki.knorm for the MUX SQUID loop (MUX_SQ_KIKNORM):");
	print(TAB1 + "Expected values for all pixels, all columns is 0x1E60");
	var expKiknormCol = [];
    var val = 0x3CC0;
    //if (fwVersion < 6) val = 0x3CC0;
    //else val = 0x1E60;
	for (var pix=0; pix<DMX_NB_PIX_PER_COL; pix++) expKiknormCol[pix] = val;
    var kiknorm_OK = true;
    var kiknorm;
	for (col=0; col<DMX_NB_COL; col++) {
		kiknorm = readDMX_sqm_kiknorm(col);
        print(TAB1 + "Checking current values for column " + col + ":");
		if (verbose) print(kiknorm);
        if (arraysAreEquals(kiknorm, expKiknormCol)) print(TAB1 + MESSAGE_OK);
        else {
            print(TAB1 + MESSAGE_ERROR);
            kiknorm_OK = false;
        }
    }
    if (!kiknorm_OK) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of knorm for the MUX SQUID loop (MUX_SQ_KNORM):");
	print(TAB1 + "Expected values for all pixels, all columns is 0x6E74");
	var expKnormCol = [];
	for (var pix=0; pix<DMX_NB_PIX_PER_COL; pix++) expKnormCol[pix] = 0x6E74;
    var knorm_OK = true;
    var knorm;
	for (col=0; col<DMX_NB_COL; col++) {
		knorm = readDMX_sqm_knorm(col);
        print(TAB1 + "Checking current values for column " + col + ":");
        if (verbose) print(knorm);

		if (arraysAreEquals(knorm, expKnormCol)) print(TAB1 + MESSAGE_OK);
        else {
            print(TAB1 + MESSAGE_ERROR);
            knorm_OK = false;
        }
    }
    if (!knorm_OK) ERROR_COUNTER++;

    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the default feedback (FB0):");
	print(TAB1 + "Expected values for all pixels, all columns is 0");
	var expFb0Col = [];
	for (var pix=0; pix<DMX_NB_PIX_PER_COL; pix++) expFb0Col[pix] = 0;
    var fb0_OK = true;
    var fb0;
	for (col=0; col<DMX_NB_COL; col++) {
		fb0 = readDMX_fb0(col);
        print(TAB1 + "Checking current values for column " + col + ":");
        if (verbose) print(fb0);

        if (arraysAreEquals(fb0, expFb0Col)) print(TAB1 + MESSAGE_OK);
        else {
            print(TAB1 + MESSAGE_ERROR);
            fb0_OK = false;
        }
    }
    if (!fb0_OK) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the feedback lockpoint (MUX_SQ_LOCKPOINT_V):");
	print(TAB1 + "Expected values for all pixels, all columns is 0");
	var expLpCol = [];
	for (var pix=0; pix<DMX_NB_PIX_PER_COL; pix++) expLpCol[pix] = 0;
    var lp_OK = true;
    var lp;
	for (col=0; col<DMX_NB_COL; col++) {
		lp = readDMX_lockpointV(col);
        print(TAB1 + "Checking current values for column " + col + ":");

        if (verbose) print(lp);

        if (arraysAreEquals(lp, expLpCol)) print(TAB1 + MESSAGE_OK);
        else {
            print(TAB1 + MESSAGE_ERROR);
            lp_OK = false;
        }
    }
    if (!lp_OK) ERROR_COUNTER++;


    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the feedback mode (MUX_SQ_FB_MODE):");
	print(TAB1 + "Expected values for all pixels, all columns is 0");
	var expFbModeCol = [];
	for (var pix=0; pix<DMX_NB_PIX_PER_COL; pix++) expFbModeCol[pix] = 0;
    var fbMode_OK = true;
    var fbMode;
	for (col=0; col<DMX_NB_COL; col++) {
		fbMode = readDMX_sqm_FBMode(col);
        print(TAB1 + "Checking current values for column " + col + ":");
        if (verbose) print(fbMode);

        if (arraysAreEquals(fbMode, expFbModeCol)) print(TAB1 + MESSAGE_OK);
        else {
            print(TAB1 + MESSAGE_ERROR);
            fbMode_OK = false;
        }
    }
    if (!fbMode_OK) ERROR_COUNTER++;

    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the weight of the LSB of the AMP SQUID offset (AMP_SQ_OFFSET_LSB):");
    print(TAB1 + "Expected values are 0, 0, 0, 0");
    var sqa_OffsetLSB = [];
    for (col = 0; col < DMX_NB_COL; col++) sqa_OffsetLSB[col] = readDMX_sqa_OffsetLSB(col);
    print(TAB1 + "Current values are " + sqa_OffsetLSB);
    if (arraysAreEquals(sqa_OffsetLSB, [0, 0, 0, 0])) print(TAB1 + MESSAGE_OK);
    else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }

    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the common coarse offset for the AMP SQUID (AMP_SQ_OFFSET_COARSE):");
    print(TAB1 + "Expected values are 0, 0, 0, 0");
    var sqa_OffsetCoarse = [];
    for (col = 0; col < DMX_NB_COL; col++) sqa_OffsetCoarse[col] = readDMX_sqa_OffsetCoarse(col);
    print(TAB1 + "Current values are " + sqa_OffsetCoarse);
    if (arraysAreEquals(sqa_OffsetCoarse, [0, 0, 0, 0])) print(TAB1 + MESSAGE_OK);
    else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }

    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the feedback delay (MUX_SQ_FB_DELAY):");
    print(TAB1 + "Expected values are 0, 0, 0, 0");
    var feedback_delay = [];
    for (col = 0; col < DMX_NB_COL; col++) feedback_delay[col] = readDMX_feedback_delay(col);
    print(TAB1 + "Current values are " + feedback_delay);
    if (arraysAreEquals(feedback_delay, [0, 0, 0, 0])) print(TAB1 + MESSAGE_OK);
    else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }

    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the offset/DAC delay (AMP_SQ_OFFSET_DAC_DELAY):");
    print(TAB1 + "Expected values are 0, 0, 0, 0");
    var offsetDAC_delay = [];
    for (col = 0; col < DMX_NB_COL; col++) offsetDAC_delay[col] = readDMX_offsetDAC_delay(col);
    print(TAB1 + "Current values are " + offsetDAC_delay);
    if (arraysAreEquals(offsetDAC_delay, [0, 0, 0, 0])) print(TAB1 + MESSAGE_OK);
    else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }

    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the offset/MUX delay (AMP_SQ_OFFSET_MUX_DELAY):");
    print(TAB1 + "Expected values are 0, 0, 0, 0");
    var offsetMUX_delay = [];
    for (col = 0; col < DMX_NB_COL; col++) offsetMUX_delay[col] = readDMX_offsetMUX_delay(col);
    print(TAB1 + "Current values are " + offsetMUX_delay);
    if (arraysAreEquals(offsetMUX_delay, [0, 0, 0, 0])) print(TAB1 + MESSAGE_OK);
    else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }

    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the sampling delay (SAMPLING_DELAY):");
    print(TAB1 + "Expected values are 0, 0, 0, 0");
    var sampling_delay = [];
    for (col = 0; col < DMX_NB_COL; col++) sampling_delay[col] = readDMX_sampling_delay(col);
    print(TAB1 + "Current values are " + sampling_delay);
    if (arraysAreEquals(sampling_delay, [0, 0, 0, 0])) print(TAB1 + MESSAGE_OK);
    else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }

    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the values of a pulse shaping set (PULSE_SHAPING):");
    print(TAB1 + "Expected values for all the columns are:");
    const expPulseShaping = [
        [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
        [ 32681, 16297, 8127, 4053, 2021, 1008, 503, 251, 125, 62, 31, 15, 8, 4, 2, 1, 0, 0, 0, 0],
        [29041, 12869, 5703, 2527, 1120, 496, 220, 97, 43, 19, 8, 4, 2, 1, 0, 0, 0, 0, 0, 0],
        [26131, 10419, 4154, 1657, 661, 263, 105, 42, 17, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
    printArrayInSlices(expPulseShaping, TAB2, 1);
    var pulseShaping_OK = true;
    var pulseShaping;
    for (col=0; col<DMX_NB_COL; col++) {
        pulseShaping = readDMX_pulseShaping(col);
        print(TAB1 + "Checking current values for column " + col + ":")

		if (verbose) printArrayInSlices(pulseShaping, TAB2, 1);
        if (twoDArraysAreEquals(pulseShaping, expPulseShaping)) print(TAB1 + MESSAGE_OK);
        else {
            print(TAB1 + MESSAGE_ERROR);
            pulseShaping_OK = false;
        }
    }
    if (!pulseShaping_OK) ERROR_COUNTER++

    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the selection of a pulse shaping set (PULSE_SHAPING_SELECTION):");
    print(TAB1 + "Expected values are 1, 1, 1, 1");
    var pulseShapingSelection = [];
    for (col = 0; col < DMX_NB_COL; col++) pulseShapingSelection[col] = readDMX_pulseShapingSelection(col);
    print(TAB1 + "Current values are " + pulseShapingSelection);
    if (arraysAreEquals(pulseShapingSelection, [1, 1, 1, 1])) print(TAB1 + MESSAGE_OK);
    else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }

    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the relock delay (RELOCK_DELAY):");
    print(TAB1 + "Expected values are 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF");
    var relock_delay = [];
    for (col = 0; col < DMX_NB_COL; col++) relock_delay[col] = readDMX_relock_delay(col);
    print(TAB1 + "Current values are " + relock_delay);
    if (arraysAreEquals(relock_delay, [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF])) print(TAB1 + MESSAGE_OK);
    else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }

    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the relock threshold (RELOCK_THRESHOLD):");
    print(TAB1 + "Expected values are 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF");
    var relock_threshold = [];
    for (col = 0; col < DMX_NB_COL; col++) relock_threshold[col] = readDMX_relock_threshold(col);
    print(TAB1 + "Current values are " + relock_threshold);
    if (arraysAreEquals(relock_threshold, [0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF])) print(TAB1 + MESSAGE_OK);
    else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }

    /******************************************************************************************************************/
    plotLongLine();
    print("Testing the value of the delock counters (RELOCK_COUNTERS):");
    print(TAB1 + "Expected values are 0x0000 for all pixels and all columns");
    const expected_counters = [NB_PIX_EMPTY_ARRAY, NB_PIX_EMPTY_ARRAY, NB_PIX_EMPTY_ARRAY, NB_PIX_EMPTY_ARRAY]
    var relock_counters = [NB_PIX_EMPTY_ARRAY, NB_PIX_EMPTY_ARRAY, NB_PIX_EMPTY_ARRAY, NB_PIX_EMPTY_ARRAY];
    print(TAB1 + "Current values are: ");
    for (col = 0; col < DMX_NB_COL; col++) {
        relock_counters[col] = readDMX_delockCounters(col);
        print(TAB2 + "Col " + col + relock_counters[col]);
    }
    if (twoDArraysAreEquals(relock_counters, expected_counters)) print(TAB1 + MESSAGE_OK);
    else {
        print(TAB1 + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }


    if (fwVersion > 2) {
	
        /******************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of the input gain:");
        print(TAB1 + "Expected values are 1, 1, 1, 1");
        var sqm_inputGain = [];
        for (col = 0; col < DMX_NB_COL; col++) sqm_inputGain[col] = readDMX_sqm_inputGain(col);
        print(TAB1 + "Current values are " + sqm_inputGain);
        if (arraysAreEquals(sqm_inputGain, [1, 1, 1, 1])) print(TAB1 + MESSAGE_OK);
        else {
            print(TAB1 + MESSAGE_ERROR);
            ERROR_COUNTER++;
        }


        /******************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of the input gain for AMP SQUID loop:");
        print(TAB1 + "Expected values are 1, 1, 1, 1");
        var sqa_inputGain = [];
        for (col = 0; col < DMX_NB_COL; col++) sqa_inputGain[col] = readDMX_sqa_inputGain(col);
        print(TAB1 + "Current values are " + sqa_inputGain);
        if (arraysAreEquals(sqa_inputGain, [1, 1, 1, 1])) print(TAB1 + MESSAGE_OK);
        else {
            print(TAB1 + MESSAGE_ERROR);
            ERROR_COUNTER++;
        }


        /******************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of ki.knorm for the AMP SQUID loop:");
        expectation = [0x3CC0, 0x3CC0, 0x3CC0, 0x3CC0];
        //if (fwVersion < 6) expectation = [0x3CC0, 0x3CC0, 0x3CC0, 0x3CC0];
        //else expectation = [0x1E60, 0x1E60, 0x1E60, 0x1E60];
        print(TAB1 + "Expected values are " + expectation);
        var sqa_kiknorm = [];
        for (col = 0; col < DMX_NB_COL; col++) sqa_kiknorm[col] = readDMX_sqa_kiknorm(col);
        print(TAB1 + "Current values are " + sqa_kiknorm);
        if (arraysAreEquals(sqa_kiknorm, expectation)) print(TAB1 + MESSAGE_OK);
        else {
            print(TAB1 + MESSAGE_ERROR);
            ERROR_COUNTER++;
        }


        /******************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of knorm for the AMP SQUID loop:");
        print(TAB1 + "Expected values are 0x6E74, 0x6E74, 0x6E74, 0x6E74");
        var sqa_knorm = [];
        for (col = 0; col < DMX_NB_COL; col++) sqa_knorm[col] = readDMX_sqa_knorm(col);
        print(TAB1 + "Current values are " + sqa_knorm);
        if (arraysAreEquals(sqa_knorm, [0x6E74, 0x6E74, 0x6E74, 0x6E74])) print(TAB1 + MESSAGE_OK);
        else {
            print(TAB1 + MESSAGE_ERROR);
            ERROR_COUNTER++;
        }


        /******************************************************************************************************************/
        plotLongLine();
        var colId = 1
        print("Testing the setting of the LSB of the AMP SQUID offset (AMP_SQ_OFFSET_FINE):");
        print(TAB1 + "Current values for column " + colId + " are: ");
        checked_values = readDMX_sqa_OffsetFine(colId);
        for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) {
            print(TAB2 + "Pixel " + pix + ": offset fine (STD) = " + checked_values[0][pix]);
            print(TAB2 + "Pixel " + pix + ": offset fine (PTR) = " + checked_values[1][pix]);
        }


        /******************************************************************************************************************/
        plotLongLine();
        print("Testing the setting of the weight of the LSB of the AMP SQUID offset for test patterns (AMP_SQ_OFFSET_LSB_PTR):");
        print(TAB1 + "Current values are: ");
        for (col = 0; col < DMX_NB_COL; col++) {
            checked_value = readDMX_sqa_OffsetLSBptr(col);
            print(TAB2 + "Column " + col + ": LSB weight for offset (test pattern) = " + checked_value);
        }
    }


    /******************************************************************************************************************/
    plotLongLine();

    if (ERROR_COUNTER === 1) print("Oups, " + ERROR_COUNTER + " error has been detected!");
    else    if (ERROR_COUNTER > 1) print("Oups, " + ERROR_COUNTER + " errors have been detected!");
        else print("Nice, no error detected");


    /******************************************************************************************************************/
    plotLongLine();

}