// -------------------------------------------------------------------------------------------------------------
//                              Copyright (C) 2022-2030 Laurent Ravera, IRAP Toulouse.
// -------------------------------------------------------------------------------------------------------------
//                              This file is part of the ATHENA X-IFU DRE SGSE tools.
//
//                              sgse tools javascripts are free software: you can redistribute it and/or modify
//                              it under the terms of the GNU General Public License as published by
//                              the Free Software Foundation, either version 3 of the License, or
//                              (at your option) any later version.
//
//                              This program is distributed in the hope that it will be useful,
//                              but WITHOUT ANY WARRANTY; without even the implied warranty of
//                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                              GNU General Public License for more details.
//
//                              You should have received a copy of the GNU General Public License
//                              along with this program.  If not, see <https://www.gnu.org/licenses/>.
// -------------------------------------------------------------------------------------------------------------
//    email                     laurent.ravera@irap.omp.eu
//    @file                     dmxCheckDefaults.dscript
// -------------------------------------------------------------------------------------------------------------
//    @details
//
//    This file checks the low level commands of the dmx_tools to read the default values of the DEMUX registers.
//
// -------------------------------------------------------------------------------------------------------------

// imports
include("../demux/dmx_tools.dscript");

/**
 * This function tests the demux commands
 */
function dmxCheckDefaults() {

    var checked_value = 0;
    const MESSAGE_ERROR = "ERROR!";
    const MESSAGE_OK = "OK";
    var MESSAGE;
    var ERROR_COUNTER = 0;

    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the functions of the dmx_tools.dscript library to read the default values of the DEMUX registers...");
    print(maDate());
    plotLongLine();
    print("");


    /******************************************************************************************************************/
    plotLongLine();
    print("Reading the firmware version");
    var fwVersion = readDMX_firmwareVersion(true);
    print(TAB1 + "The expected value is 2")
    if (fwVersion === 2) print(TAB1 + "--> " + MESSAGE_OK);
    else {
        print(TAB1 + "--> " + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }


    /******************************************************************************************************************/
    plotLongLine();
    print("Reading the hardware version");
    var hwVersion = readDMX_hardwareVersion(true);
    print(TAB1 + "The expected value is 7")
    if (hwVersion.modelReference === 7) print(TAB1 + "--> " + MESSAGE_OK);
    else {
        print(TAB1 + "--> " + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }


    /**********************************************************************************************************************/
    plotLongLine();
    print("Reading the delock flag");
    var delockflag = readDMX_delockFlag(true);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Reading the housekeepings");
    var housekeepings = readDMX_HK(true);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the data acquisition mode:");
    var dataAcqMode = readDMX_dataAcqMode();
    print(TAB1 + "Current value is: " + dataAcqMode);
    print(TAB1 + "The expected value is 0");
    if (dataAcqMode === 0) print(TAB1 + "--> " + MESSAGE_OK);
    else {
        print(TAB1 + "--> " + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of feedback on/off mode:");
    var feedbackOnOff = readDMX_feedbackOnOff();
    var feedbackOnOff2 = feedbackOnOff;
    print(TAB1 + "Current values are: ");
    for (var col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": --> " + to_hexaString(feedbackOnOff % Math.pow(2, 4)));
        feedbackOnOff = feedbackOnOff >> 4;
    }
    print(TAB1 + "Expected values are: ");
    for (var col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": --> " + 0);
    }
    if (feedbackOnOff2 === 0) print(TAB1 + "--> " + MESSAGE_OK);
    else {
        print(TAB1 + "--> " + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of offset mode:");
    print(TAB1 + "Current values are: ");
    var offsetMode = readDMX_offsetMode();
    var offsetMode2 = offsetMode;
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": --> " + to_hexaString(offsetMode % Math.pow(2, 4)));
        offsetMode = offsetMode >> 4;
    }
    print(TAB1 + "Expected values are: ");
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": --> " + 0);
    }
    if (offsetMode2 === 0) print(TAB1 + "--> " + MESSAGE_OK);
    else {
        print(TAB1 + "--> " + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the definition of the test patterns:");
    print(TAB1 + "Current values are: ");
    var testPattern = readDMX_testPattern();
    for (region=0; region<DMX_TEST_PATTERN_NBREGIONS; region++) {
        print(TAB2 + "Region " + region + ": " + testPattern[region]);
    }
    print(TAB1 + "Expected values are: ");
    const expTestPattern = [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]
    for (region=0; region<DMX_TEST_PATTERN_NBREGIONS; region++) {
        print(TAB2 + "Region " + region + ": " + expTestPattern[region]);
    }
    if (twoDArraysAreEquals(testPattern, expTestPattern)) print(TAB1 + "--> " + MESSAGE_OK);
    else {
        print(TAB1 + "--> " + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the status of the test patterns:");
    print(TAB1 + "Current values are: ");
    var testPatternEnable = readDMX_testPatternEnable();
    print(TAB2 + "Enable           = " + testPatternEnable[0]);
    print(TAB2 + "Infinitely         = " + testPatternEnable[1]);
    print(TAB2 + "Number times = " + testPatternEnable[2]);
    print(TAB1 + "Expected values are: ");
    print(TAB2 + "Enable           = " + false);
    print(TAB2 + "Infinitely         = " + false);
    print(TAB2 + "Number times = " + 0);
    if (arraysAreEquals(testPatternEnable, [false, false, 0])) print(TAB1 + "--> " + MESSAGE_OK);
    else {
        print(TAB1 + "--> " + MESSAGE_ERROR);
        ERROR_COUNTER++;
    }


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the boxcar length:");
    print(TAB1 + "Current value is: ");
    checked_value = readDMX_boxcarLength();
    for (col = 0; col < DMX_NB_COL; col++) print(TAB2 + "Column " + col + " --> " + checked_value[col]);
    print(TAB1 + "Setting new values:")
    var boxcarL = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        boxcarL[col] = (col + 1) * 2;
        print(TAB2 + "Column " + col + " --> " + boxcarL[col]);
    }
    setDMX_boxcarLength(boxcarL);
    print(TAB1 + "Reading the new values:");
    checked_value = readDMX_boxcarLength();
    for (col = 0; col < DMX_NB_COL; col++) print(TAB2 + "Column " + col + " --> " + checked_value[col]);
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(boxcarL, checked_value)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying an incorrect parameter value, an error message is expected:");
    print(TAB2 + "Trying an wrong number of samples");
    setDMX_boxcarLength([20, boxcarL[1], boxcarL[2], boxcarL[3]]);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of feedback algo parameter A:");
    print(TAB1 + "Current values for column " + colId + " are: ");
    checked_values = readDMX_a(colId);
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) print(TAB2 + "Pixel " + pix + ": A = " + checked_values[pix]);
    print(TAB1 + "Setting new values:")
    values = [DMX_NB_PIX_PER_COL];
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) {
        values[pix] = pix * 2 + 1;
        print(TAB2 + "Pixel " + pix + ": A = " + values[pix]);
    }
    setDMX_a(colId, values);
    print(TAB1 + "Reading the new values:");
    checked_values = readDMX_a(colId);
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) print(TAB2 + "Pixel " + pix + ": A = " + checked_values[pix]);
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying an incorrect parameter value, an error message is expected:");
    print(TAB2 + "Trying a wrong column Id");
    setDMX_a(4, values);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the input gain:");
    print(TAB1 + "Current values are: ");
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_value = readDMX_sqm_inputGain(col);
        print(TAB2 + "Column " + col + ": " + checked_value);
    }
    print(TAB1 + "Setting new values:")
    values = [0x0007, 0x0004, 0x000F, 0x0000];
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": " + values[col]);
        setDMX_sqm_inputGain(col, values[col]);
    }
    print(TAB1 + "Reading the new values:");
    checked_values = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_sqm_inputGain(col);
        print(TAB2 + "Column " + col + ": " + checked_values[col]);
    }
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying an incorrect parameter value, an error message is expected:");
    print(TAB2 + "Trying a wrong column Id");
    setDMX_sqm_inputGain(4, values[col]);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the input gain for AMP SQUID loop:");
    print(TAB1 + "Current values are: ");
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_value = readDMX_sqa_inputGain(col);
        print(TAB2 + "Column " + col + ": " + checked_value);
    }
    print(TAB1 + "Setting new values:")
    values = [0x0007, 0x0004, 0x000F, 0x0000];
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": " + values[col]);
        setDMX_sqa_inputGain(col, values[col]);
    }
    print(TAB1 + "Reading the new values:");
    checked_values = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_sqa_inputGain(col);
        print(TAB2 + "Column " + col + ": " + checked_values[col]);
    }
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying an incorrect parameter value, an error message is expected:");
    print(TAB2 + "Trying a wrong column Id");
    setDMX_sqa_inputGain(4, values[col]);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of ki.knorm for the MUX SQUID loop:");
    print(TAB1 + "Current values for column " + colId + " are: ");
    checked_values = readDMX_sqm_kiknorm(colId);
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) print(TAB2 + "Pixel " + pix + ": kiknom = " + checked_values[pix]);
    print(TAB1 + "Setting new values:")
    values = [DMX_NB_PIX_PER_COL];
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) {
        values[pix] = pix * 2 + 1;
        print(TAB2 + "Pixel " + pix + ": kiknom = " + values[pix]);
    }
    setDMX_sqm_kiknorm(colId, values);
    print(TAB1 + "Reading the new values:");
    checked_values = readDMX_sqm_kiknorm(colId);
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) print(TAB2 + "Pixel " + pix + ": kiknom = " + checked_values[pix]);
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying an incorrect parameter value, an error message is expected:");
    print(TAB2 + "Trying a wrong column Id");
    setDMX_sqm_kiknorm(4, values);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of ki.knorm for the AMP SQUID loop:");
    print(TAB1 + "Current values are: ");
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_value = readDMX_sqa_kiknorm(col);
        print(TAB2 + "Column " + col + ": kiknorm = " + to_hexaString(checked_value));
    }
    print(TAB1 + "Setting new values:")
    values = [0xBABA, 0x0000, 0x2F2F, 0x6666];
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": kiknorm = " + to_hexaString(values[col]));
        setDMX_sqa_kiknorm(col, values[col]);
    }
    print(TAB1 + "Reading the new values:");
    checked_values = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_sqa_kiknorm(col);
        print(TAB2 + "Column " + col + ": kiknorm = " + to_hexaString(checked_values[col]));
    }
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying an incorrect parameter value, an error message is expected:");
    print(TAB2 + "Trying a wrong column Id");
    setDMX_sqa_kiknorm(4, values[col]);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of knorm for the MUX SQUID loop:");
    print(TAB1 + "Current values for column " + colId + " are: ");
    checked_values = readDMX_sqm_knorm(colId);
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) print(TAB2 + "Pixel " + pix + ": knom = " + checked_values[pix]);
    print(TAB1 + "Setting new values:")
    values = [DMX_NB_PIX_PER_COL];
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) {
        values[pix] = pix * 2 + 1;
        print(TAB2 + "Pixel " + pix + ": knom = " + values[pix]);
    }
    setDMX_sqm_knorm(colId, values);
    print(TAB1 + "Reading the new values:");
    checked_values = readDMX_sqm_knorm(colId);
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) print(TAB2 + "Pixel " + pix + ": knom = " + checked_values[pix]);
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying an incorrect parameter value, an error message is expected:");
    print(TAB2 + "Trying a wrong column Id");
    setDMX_sqm_knorm(4, values);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of knorm for the AMP SQUID loop:");
    print(TAB1 + "Current values are: ");
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_value = readDMX_sqa_knorm(col);
        print(TAB2 + "Column " + col + ": knorm = " + to_hexaString(checked_value));
    }
    print(TAB1 + "Setting new values:")
    values = [0xBABA, 0x0000, 0x2F2F, 0x6666];
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": knorm = " + to_hexaString(values[col]));
        setDMX_sqa_knorm(col, values[col]);
    }
    print(TAB1 + "Reading the new values:");
    checked_values = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_sqa_knorm(col);
        print(TAB2 + "Column " + col + ": knorm = " + to_hexaString(checked_values[col]));
    }
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying an incorrect parameter value, an error message is expected:");
    print(TAB2 + "Trying a wrong column Id");
    setDMX_sqa_knorm(4, values[col]);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the default feedback (FB0):");
    print(TAB1 + "Current values for column " + colId + " are: ");
    checked_values = readDMX_fb0(colId);
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) print(TAB2 + "Pixel " + pix + ": FB0 = " + checked_values[pix]);
    print(TAB1 + "Setting new values:")
    values = [DMX_NB_PIX_PER_COL];
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) {
        values[pix] = pix * 2 + 1;
        print(TAB2 + "Pixel " + pix + ": FB0 = " + values[pix]);
    }
    setDMX_fb0(colId, values);
    print(TAB1 + "Reading the new values:");
    checked_values = readDMX_fb0(colId);
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) print(TAB2 + "Pixel " + pix + ": FB0 = " + checked_values[pix]);
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying an incorrect parameter value, an error message is expected:");
    print(TAB2 + "Trying a wrong column Id");
    setDMX_fb0(4, values);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the feedback lockpoint:");
    print(TAB1 + "Current values for column " + colId + " are: ");
    checked_values = readDMX_lockpointV(colId);
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) print(TAB2 + "Pixel " + pix + ": lockpointV = " + checked_values[pix]);
    print(TAB1 + "Setting new values:")
    values = [DMX_NB_PIX_PER_COL];
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) {
        values[pix] = pix * 2 + 1;
        print(TAB2 + "Pixel " + pix + ": lockpointV = " + values[pix]);
    }
    setDMX_lockpointV(colId, values);
    print(TAB1 + "Reading the new values:");
    checked_values = readDMX_lockpointV(colId);
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) print(TAB2 + "Pixel " + pix + ": lockpointV = " + checked_values[pix]);
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying an incorrect parameter value, an error message is expected:");
    print(TAB2 + "Trying a wrong column Id");
    setDMX_lockpointV(4, values);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the feedback mode:");
    print(TAB1 + "Current values for column " + colId + " are: ");
    checked_values = readDMX_sqm_FBMode(colId);
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) print(TAB2 + "Pixel " + pix + ": feedback mode = " + checked_values[pix]);
    print(TAB1 + "Setting new values:")
    values = [DMX_NB_PIX_PER_COL];
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) {
        values[pix] = pix % 3;
        print(TAB2 + "Pixel " + pix + ": feedback mode = " + values[pix]);
    }
    setDMX_sqm_FBMode(colId, values);
    print(TAB1 + "Reading the new values:");
    checked_values = readDMX_sqm_FBMode(colId);
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) print(TAB2 + "Pixel " + pix + ": feedback mode = " + checked_values[pix]);
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying incorrect parameter values, error messages are expected:");
    print(TAB2 + "Trying a wrong column id:");
    setDMX_sqm_FBMode(4, values);
    print(TAB2 + "Trying a wrong feedback mode:");
    values[0] = 3;
    setDMX_sqm_FBMode(0, values);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the LSB of the AMP SQUID offset (AMP_SQ_OFFSET_FINE):");
    print(TAB1 + "Current values for column " + colId + " are: ");
    checked_values = readDMX_sqa_OffsetFine(colId);
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) {
        print(TAB2 + "Pixel " + pix + ": offset fine (STD) = " + checked_values[0][pix]);
        print(TAB2 + "Pixel " + pix + ": offset fine (PTR) = " + checked_values[1][pix]);
    }
    print(TAB1 + "Setting new values:")
    values0 = [DMX_NB_PIX_PER_COL];
    values1 = [DMX_NB_PIX_PER_COL];
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) {
        values0[pix] = pix % 7;
        print(TAB2 + "Pixel " + pix + ": offset fine (STD) = " + values0[pix]);
        values1[pix] = (pix + 3) % 7;
        print(TAB2 + "Pixel " + pix + ": offset fine (STD) = " + values1[pix]);
    }
    setDMX_sqa_OffsetFine(colId, values0, values1);
    print(TAB1 + "Reading the new values:");
    checked_values = readDMX_sqa_OffsetFine(colId);
    for (pix = 0; pix < DMX_NB_PIX_PER_COL; pix++) {
        print(TAB2 + "Pixel " + pix + ": offset fine (STD) = " + checked_values[0][pix]);
        print(TAB2 + "Pixel " + pix + ": offset fine (PTR) = " + checked_values[1][pix]);
    }
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values0, checked_values[0]) && arraysAreEquals(values1, checked_values[1])) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying incorrect parameter values, error messages are expected:");
    print(TAB2 + "Trying a wrong column id:");
    setDMX_sqa_OffsetFine(4, values0, values1);
    print(TAB2 + "Trying wrong parameter values:");
    values0[0] = 8;
    setDMX_sqa_OffsetFine(0, values0, values1);
    setDMX_sqa_OffsetFine(0, values1, values0);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the weight of the LSB of the AMP SQUID offset for test patterns (AMP_SQ_OFFSET_LSB_PTR):");
    print(TAB1 + "Current values are: ");
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_value = readDMX_sqa_OffsetLSBptr(col);
        print(TAB2 + "Column " + col + ": LSB weight for offset (test pattern) = " + checked_value);
    }
    print(TAB1 + "Setting new values:")
    values = [0x0ABA, 0x0000, 0x0F2F, 0x0666];
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": LSB weight for offset (test pattern) = " + values[col]);
        setDMX_sqa_OffsetLSBptr(col, values[col]);
    }
    print(TAB1 + "Reading the new values:");
    checked_values = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_sqa_OffsetLSBptr(col);
        print(TAB2 + "Column " + col + ": LSB weight for offset (test pattern) = " + checked_values[col]);
    }
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying incorrect parameter values, error messages are expected:");
    print(TAB2 + "Trying a wrong column id:");
    setDMX_sqa_OffsetLSBptr(4, 0);
    print(TAB2 + "Trying a wrong parameter value:");
    setDMX_sqa_OffsetLSBptr(0, 0x1FFF);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the weight of the LSB of the AMP SQUID offset (AMP_SQ_OFFSET_LSB):");
    print(TAB1 + "Current values are: ");
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_value = readDMX_sqa_OffsetLSB(col);
        print(TAB2 + "Column " + col + ": LSB weight for offset = " + checked_value);
    }
    print(TAB1 + "Setting new values:")
    values = [0x0ABA, 0x0000, 0x0F2F, 0x0666];
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": LSB weight for offset = " + values[col]);
        setDMX_sqa_OffsetLSB(col, values[col]);
    }
    print(TAB1 + "Reading the new values:");
    checked_values = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_sqa_OffsetLSB(col);
        print(TAB2 + "Column " + col + ": LSB weight for offset = " + checked_values[col]);
    }
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying incorrect parameter values, error messages are expected:");
    print(TAB2 + "Trying a wrong column id:");
    setDMX_sqa_OffsetLSB(4, 0);
    print(TAB2 + "Trying a wrong parameter value:");
    setDMX_sqa_OffsetLSB(0, 0x1FFF);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the common coarse offset for the AMP SQUID (AMP_SQ_OFFSET_COARSE):");
    print(TAB1 + "Current values are: ");
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_value = readDMX_sqa_OffsetCoarse(col);
        print(TAB2 + "Column " + col + ": offset coarse = " + checked_value);
    }
    print(TAB1 + "Setting new values:")
    values = [0x0ABA, 0x0000, 0x0F2F, 0x0666];
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": offset coarse = " + values[col]);
        setDMX_sqa_OffsetCoarse(col, values[col]);
    }
    print(TAB1 + "Reading the new values:");
    checked_values = [DMX_NB_COL];
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_sqa_OffsetCoarse(col);
        print(TAB2 + "Column " + col + ": offset coarse = " + checked_values[col]);
    }
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying incorrect parameter values, error messages are expected:");
    print(TAB2 + "Trying a wrong column id:");
    setDMX_sqa_OffsetCoarse(4, 0);
    print(TAB2 + "Trying a wrong parameter value:");
    setDMX_sqa_OffsetCoarse(0, 0x1FFF);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the feedback delay (MUX_SQ_FB_DELAY):");
    print(TAB1 + "Current values are :");
    for (col = 0; col < DMX_NB_COL; col++) {
        value = readDMX_feedback_delay(col);
        print(TAB2 + "Column " + col + ": feedback delay = " + checked_value);
    }
    values = [-512, 0, 10, 40];
    checked_values = [DMX_NB_COL];
    print(TAB1 + "Setting new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": feedback delay = " + values[col]);
        setDMX_feedback_delay(col, values[col]);
    }
    print(TAB1 + "Reading the new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_feedback_delay(col);
        print(TAB2 + "Column " + col + ": feedback delay = " + checked_values[col]);
    }
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying incorrect parameter values, error messages are expected:");
    print(TAB2 + "Trying a wrong column id:");
    setDMX_feedback_delay(4, 40);   // wrong column id
    print(TAB2 + "Trying wrong delay values:");
    setDMX_feedback_delay(0, 41);   // wrong delay value
    setDMX_feedback_delay(0, -513); // wrong delay value


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the offset/DAC delay (AMP_SQ_OFFSET_DAC_DELAY):");
    print(TAB1 + "Current values are :");
    for (col = 0; col < DMX_NB_COL; col++) {
        value = readDMX_offsetDAC_delay(col);
        print(TAB2 + "Column " + col + ": offset/DAC delay = " + checked_value);
    }
    values = [0, 11, 777, 1023];
    checked_values = [DMX_NB_COL];
    print(TAB1 + "Setting new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": offset/DAC delay = " + values[col]);
        setDMX_offsetDAC_delay(col, values[col]);
    }
    print(TAB1 + "Reading the new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_offsetDAC_delay(col);
        print(TAB2 + "Column " + col + ": offset/DAC delay = " + checked_values[col]);
    }
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying incorrect parameter values, error messages are expected:");
    print(TAB2 + "Trying a wrong column id:");
    setDMX_offsetDAC_delay(4, 40);
    print(TAB2 + "Trying a wrong delay value:");
    setDMX_offsetDAC_delay(0, 1024);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the offset/MUX delay (AMP_SQ_OFFSET_MUX_DELAY):");
    print(TAB1 + "Current values are :");
    for (col = 0; col < DMX_NB_COL; col++) {
        value = readDMX_offsetMUX_delay(col);
        print(TAB2 + "Column " + col + ": offset/MUX delay = " + checked_value);
    }
    values = [-512, 0, 10, 40];
    checked_values = [DMX_NB_COL];
    print(TAB1 + "Setting new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": offset/MUX delay = " + values[col]);
        setDMX_offsetMUX_delay(col, values[col]);
    }
    print(TAB1 + "Reading the new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_offsetMUX_delay(col);
        print(TAB2 + "Column " + col + ": offset/MUX delay = " + checked_values[col]);
    }
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying incorrect parameter values, error messages are expected:");
    print(TAB2 + "Trying a wrong column id:");
    setDMX_offsetMUX_delay(4, 40);
    print(TAB2 + "Trying wrong delay values:");
    setDMX_offsetMUX_delay(0, -513);
    setDMX_offsetMUX_delay(0, 41);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the sampling delay (SAMPLING_DELAY):");
    print(TAB1 + "Current values are :");
    for (col = 0; col < DMX_NB_COL; col++) {
        value = readDMX_sampling_delay(col);
        print(TAB2 + "Column " + col + ": sampling delay = " + checked_value);
    }
    values = [0, 5, 10, 19];
    checked_values = [DMX_NB_COL];
    print(TAB1 + "Setting new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": sampling delay = " + values[col]);
        setDMX_sampling_delay(col, values[col]);
    }
    print(TAB1 + "Reading the new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_sampling_delay(col);
        print(TAB2 + "Column " + col + ": sampling delay = " + checked_values[col]);
    }
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying incorrect parameter values, error messages are expected:");
    print(TAB2 + "Trying a wrong column id:");
    setDMX_sampling_delay(4, 0);
    print(TAB2 + "Trying a wrong delay value:");
    setDMX_sampling_delay(0, 20);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the values of a pulse shaping set (PULSE_SHAPING):");
    print(TAB1 + "Setting new values for column " + colId);
    values = [
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
        [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 1, 2, 3, 4],
        [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        [15, 16, 17, 18, 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
    ]
    setDMX_pulseShaping(colId, values);
    print(TAB1 + "Reading the new values:");
    checked_values = readDMX_pulseShaping(colId);
    MESSAGE = MESSAGE_OK;
    for (var set = 0; set < 3; set++) {
        if (!arraysAreEquals(values[set], checked_values[set])) MESSAGE = MESSAGE_ERROR;
    }
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;

    print(TAB1 + "Trying incorrect parameter values, error messages are expected:");
    print(TAB2 + "Trying a wrong column id:");
    setDMX_pulseShapingSet(4, 0, values);
    print(TAB2 + "Trying a wrong set id:");
    setDMX_pulseShapingSet(0, 4, values);
    print(TAB2 + "Trying a wrong number of values (too short):");
    var values_too_short = [DMX_PULSESHAPING_NBVALUES - 1];
    for (i = 0; i < DMX_PULSESHAPING_NBVALUES - 1; i++) values_too_short[i] = i;
    setDMX_pulseShapingSet(0, 0, values_too_short);
    print(TAB2 + "Trying a wrong number of values (too long):");
    values_too_long = [DMX_PULSESHAPING_NBVALUES + 1];
    for (i = 0; i < DMX_PULSESHAPING_NBVALUES + 1; i++) values_too_long[i] = i;
    setDMX_pulseShapingSet(0, 0, values_too_long);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the selection of a pulse shaping set (PULSE_SHAPING_SELECTION):");
    print(TAB1 + "Current values are :");
    for (col = 0; col < DMX_NB_COL; col++) {
        value = readDMX_pulseShapingSelection(col);
        print(TAB2 + "Column " + col + ": pulse shaping set = " + value);
    }
    values = [0, 1, 2, 3];
    checked_values = [DMX_NB_COL];
    print(TAB1 + "Setting new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": pulse shaping set = " + values[col]);
        setDMX_pulseShapingSelection(col, values[col]);
    }
    print(TAB1 + "Reading the new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_pulseShapingSelection(col);
        print(TAB2 + "Column " + col + ": pulse shaping set = " + checked_values[col]);
    }
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying incorrect parameter values, error messages are expected:");
    print(TAB2 + "Trying a wrong column id:");
    setDMX_pulseShapingSelection(4, values[col]);
    print(TAB2 + "Trying a wrong set id:");
    setDMX_pulseShapingSelection(0, 4);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the relock delay (RELOCK_DELAY):");
    print(TAB1 + "Current values are :");
    for (col = 0; col < DMX_NB_COL; col++) {
        value = readDMX_relock_delay(col);
        print(TAB2 + "Column " + col + ": relock delay = " + value);
    }
    values = [0, 0x6666, 0xABBA, 0xFFFF];
    checked_values = [DMX_NB_COL];
    print(TAB1 + "Setting new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": relock delay = " + values[col]);
        setDMX_relock_delay(col, values[col]);
    }
    print(TAB1 + "Reading the new values:");
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_relock_delay(col);
        print(TAB2 + "Column " + col + ": relock delay = " + checked_values[col]);
    }
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying incorrect parameter values, error messages are expected:");
    print(TAB2 + "Trying a wrong column id:");
    setDMX_relock_delay(4, values[col]);


    /**********************************************************************************************************************/
    plotLongLine();
    print("Testing the setting of the relock threshold (RELOCK_THRESHOLD):");
    print(TAB1 + "Current values are :");
    for (col = 0; col < DMX_NB_COL; col++) {
        value = readDMX_relock_threshold(col);
        print(TAB2 + "Column " + col + ": relock threshold = " + value);
    }
    values = [0, 0x6666, 0xABBA, 0xFFFF];
    checked_values = [DMX_NB_COL];
    print(TAB1 + "Setting new values:")
    for (col = 0; col < DMX_NB_COL; col++) {
        print(TAB2 + "Column " + col + ": relock threshold = " + values[col]);
        setDMX_relock_threshold(col, values[col]);
    }
    print(TAB1 + "Reading the new values:");
    for (col = 0; col < DMX_NB_COL; col++) {
        checked_values[col] = readDMX_relock_threshold(col);
        print(TAB2 + "Column " + col + ": relock threshold = " + checked_values[col]);
    }
    MESSAGE = MESSAGE_ERROR;
    if (arraysAreEquals(values, checked_values)) MESSAGE = MESSAGE_OK;
    print(TAB1 + "--> " + MESSAGE);
    if (MESSAGE === MESSAGE_ERROR) ERROR_COUNTER++;
    print(TAB1 + "Trying incorrect parameter values, error messages are expected:");
    print(TAB2 + "Trying a wrong column id:");
    setDMX_relock_delay(4, values[col]);


    /**********************************************************************************************************************/
    plotLongLine();
    if (ERROR_COUNTER > 0) {
        print("Oups, " + ERROR_COUNTER + " errors have been detected!")
    } else {
        print("Nice, no error detected")
    }

    /**********************************************************************************************************************/
    plotLongLine();
}