// -------------------------------------------------------------------------------------------------------------
//                              Copyright (C) 2022-2030 Laurent Ravera, IRAP Toulouse.
// -------------------------------------------------------------------------------------------------------------
//                              This file is part of the ATHENA X-IFU DRE SGSE tools.
//
//                              sgse tools javascripts are free software: you can redistribute it and/or modify
//                              it under the terms of the GNU General Public License as published by
//                              the Free Software Foundation, either version 3 of the License, or
//                              (at your option) any later version.
//
//                              This program is distributed in the hope that it will be useful,
//                              but WITHOUT ANY WARRANTY; without even the implied warranty of
//                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                              GNU General Public License for more details.
//
//                              You should have received a copy of the GNU General Public License
//                              along with this program.  If not, see <https://www.gnu.org/licenses/>.
// -------------------------------------------------------------------------------------------------------------
//    email                     laurent.ravera@irap.omp.eu
//    @file                     dmxHk.dscript
// -------------------------------------------------------------------------------------------------------------
//    @details
//
//    This file contains dmx hk read and conversion functions.
//
// -------------------------------------------------------------------------------------------------------------

const DMX_NB_HK = 14;
const DMX_HK_NAMES = ['P5V0_ANA', 'P3V3_ANA', 'P2V5_ANA', 'P1V8_ANA', 'M2V5_ANA', 'M5V0_ANA', 'P3V3_DIG',
    'P2V5_DIG', 'P1V2_DIG', 'TEMP_AVE', 'TEMP_MAX', 'P2V5_AUX', 'VREF_TEM', 'VREF_R2R'];
const DMX_HK_UNITS = [' V', ' V', ' V', ' V', ' V', ' V', ' V',
    ' V', ' V', ' C', ' C', ' V', ' V', ' V'];
const DMX_HK_Tmax = + 60;
const DMX_HK_Tmin = -40;
const DMX_HK_Vmax = 3.2;
const DMX_HK_Vmin = 0.1;
const DMX_HK_FSRRatio = 3.3 / (Math.pow(2,12) - 1);
const DMX_HK_TEMP_A = DMX_HK_FSRRatio * (DMX_HK_Tmax - DMX_HK_Tmin) / (DMX_HK_Vmax - DMX_HK_Vmin);
const DMX_HK_TEMP_B = DMX_HK_Tmin - DMX_HK_Vmin / DMX_HK_TEMP_A;
const DMX0_HK_CONV_A = [4.74/1955, 3.174/1971, 2.364/1878, 1.8/2015, -2.439/1912, -4.983/1954, 3.157/1951,
    2.404/1832, 1.125/1900, DMX_HK_TEMP_A, DMX_HK_TEMP_A, 2.379/1893, 2.497/1979, 3.182/1972];
const DMX0_HK_CONV_B = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, DMX_HK_TEMP_B, DMX_HK_TEMP_B, 0.0, 0.0, 0.0];

/**
 * Reads the housekeepings.
 * @return {array} houseKeepings - housekeepings.
 */
function readDMX_HK() {
    sendToDMXReadMultiRegisters(ADD_DMX_HK_P5V0_ANA, DMX_NB_HK);
    getLatestValue("DMX_registers");
    return DMX_registers.slice(ADD_DMX_HK_P5V0_ANA, ADD_DMX_HK_P5V0_ANA+DMX_NB_HK);
}

/**
 * Computes the engineering value of a housekeeping.
 * @param {number} hk_p - housekeepings (ADU).
 * @param {number} convA_p - conversion factor
 * @param {number} convB_p - conversion offset
 * @return {number} EngHk - Engineering value of the housekeeping
 */
function convertDMX_HK(hk_p, convA_p, convB_p) {
    return convB_p + hk_p*convA_p;
}

/**
 * Displays the housekeepings.
 * @param {boolean} formatADU_p - If true the HK are printed in ADU else as engineering values (default is false).
 */
function printDMX_HK(formatADU_p) {
    if (typeof(formatADU_p) === 'undefined') formatADU_p = false;
    var dmxHk = readDMX_HK();
    var outputText1 = "";
    var outputText2 = "";
    for (var iHK= 0; iHK < DMX_NB_HK; iHK++) {
        outputText1 = TAB2 + DMX_HK_NAMES[iHK] + ":" + TAB1;
        if (formatADU_p) outputText2 = dmxHk[iHK];
        else outputText2 = convertDMX_HK(dmxHk[iHK], DMX0_HK_CONV_A[iHK], DMX0_HK_CONV_B[iHK]).toFixed(3) + DMX_HK_UNITS[iHK];
        print(outputText1 + outputText2);
    }
}
