// -------------------------------------------------------------------------------------------------------------
//                              Copyright (C) 2022-2030 Ken-ji de la Rosa, IRAP Toulouse.
// -------------------------------------------------------------------------------------------------------------
//                              This file is part of the ATHENA X-IFU DRE Focal Plane Assembly simulator.
//
//                              fpasim-fw is free software: you can redistribute it and/or modify
//                              it under the terms of the GNU General Public License as published by
//                              the Free Software Foundation, either version 3 of the License, or
//                              (at your option) any later version.
//
//                              This program is distributed in the hope that it will be useful,
//                              but WITHOUT ANY WARRANTY; without even the implied warranty of
//                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                              GNU General Public License for more details.
//
//                              You should have received a copy of the GNU General Public License
//                              along with this program.  If not, see <https://www.gnu.org/licenses/>.
// -------------------------------------------------------------------------------------------------------------
//    email                   kenji.delarosa@alten.com
//    @file                   utils_tools.dscript
// -------------------------------------------------------------------------------------------------------------
//    Automatic Generation    No
//    Code Rules Reference    
// -------------------------------------------------------------------------------------------------------------
//    @details      
//          
//     This script defines 2 main types of functions:
//        . printing/displaying functions. Thoses functions are used to beautify the report.
//        . helping function such as: convert_hex_to_ascii
//       
//
// -------------------------------------------------------------------------------------------------------------

const CHAR_SECTION = "*";
const NB_CHAR_SECTION = 70;
const CHAR_INDENT = " ";
const NB_CHAR_INDENT = 4;

/**
 * Repeat a String
 *    ex0: str_p = "a", nb_times_p = 0 => return = ""
 *    ex1: str_p = "a", nb_times_p = 1 => return = "a"
 *    ex2: str_p = "a", nb_times_p = 2 => return = "aa"
 * @param {string} str_p - string to repeat
 * @param {number} nb_times_p - number of times for the repeating
 * @return {string} The repeating string
 */
function duplicate_str(str_p, nb_times_p) {
    str0 = "";
    for (var i = 0; i < nb_times_p; i++) {
        str0 += str_p;
    }
    return str0;
}



/**
 * Print a Title
 * @param {string} msg_p - Title to print (string or array of strings)
 * @param {number} level_p - level of indentation at the beginning
 * @param {number} mode_p - define the output print
 * @param {string} color_p - define the message color. The list of colors can be found in the common.console_colors
 */
function display_title(msg_p, level_p, mode_p, color_p) {

    // default function parameter values
    if (typeof(level_p) === 'undefined') level_p = 0;
    if (typeof(mode_p) === 'undefined') mode_p = 0;
    if (typeof(color_p) === 'undefined') color_p = 'yellow';

    // color = colors[color_p];
    // color_rst = colors['reset'];
    msg_array = _convert_str_to_array(msg_p = msg_p)
    str_indent = duplicate_str(str_p = CHAR_INDENT, nb_times_p = NB_CHAR_INDENT * level_p);
    str_char = duplicate_str(str_p = CHAR_SECTION, nb_times_p = NB_CHAR_SECTION);
    // str_sep = color + str_indent + str_char;
    str_sep = str_indent + str_char;

    print('');
    print(str_sep);
    for (var i = 0; i < msg_array.length; i++) {
        msg = msg_array[i];
        // str0 = color + str_indent + ' ' + msg;
        str0 = str_indent + ' ' + msg;
        print(str0);
    }
    // print(str_sep + color_rst);
    print(str_sep);

}

/**
 * Print a subTitle
 * @param {string} msg_p - subTitle to print (string or array of strings)
 * @param {number} level_p - level of indentation at the beginning
 * @param {number} mode_p - define the output print
 * @param {string} color_p - define the message color. The list of colors can be found in the common.console_colors
 */
function display_subtitle(msg_p, level_p, mode_p, color_p) {

    // default function parameter values
    if (typeof(level_p) === 'undefined') level_p = 0;
    if (typeof(mode_p) === 'undefined') mode_p = 0;
    if (typeof(color_p) === 'undefined') color_p = 'yellow';


    // color = colors[color_p];
    // color_rst = colors['reset'];
    msg_array = _convert_str_to_array(msg_p = msg_p)
    str_indent = duplicate_str(str_p = CHAR_INDENT, nb_times_p = NB_CHAR_INDENT * level_p);
    str_char = duplicate_str(str_p = CHAR_SECTION, nb_times_p = NB_CHAR_SECTION);
    // str_sep = color + str_indent + str_char;
    str_sep = str_indent + str_char;

    print('');
    for (var i = 0; i < msg_array.length; i++) {
        msg = msg_array[i];
        // str0 = color + str_indent + ' ' + msg;
        str0 = str_indent + ' ' + msg;
        print(str0);
    }
    // print(str_sep + color_rst);
    print(str_sep);
}

/**
 * Print a message
 * @param {string} msg_p - message to print (string or array of strings)
 * @param {number} level_p - level of indentation at the beginning
 * @param {number} mode_p - define the output print
 * @param {string} color_p - define the message color. The list of colors can be found in the common.console_colors
 */
function display(msg_p, level_p, mode_p, color_p) {

    // default function parameter values
    if (typeof(level_p) === 'undefined') level_p = 0;
    if (typeof(mode_p) === 'undefined') mode_p = 0;
    if (typeof(color_p) === 'undefined') color_p = 'reset';

    // color = colors[color_p]
    // color_rst = colors['reset']
    msg_array = _convert_str_to_array(msg_p = msg_p)
    str_indent = duplicate_str(str_p = CHAR_INDENT, nb_times_p = NB_CHAR_INDENT * level_p);

    for (var i = 0; i < msg_array.length; i++) {
        msg = msg_array[i];
        // str0 = color + str_indent + ' ' + msg + color_rst
        str0 = str_indent + ' ' + msg;
        print(str0);
    }
}

/**
 * Display errors
 * @param {string} msg_p - message to print (string or array of strings)
 * @param {number} level_p - level of indentation at the beginning
 * @param {number} mode_p - define the output print
 * @param {string} color_p - define the message color. The list of colors can be found in the common.console_colors
 */
function display_error(msg_p, level_p, mode_p, color_p) {

    // default function parameter values
    if (typeof(level_p) === 'undefined') level_p = 0;
    if (typeof(mode_p) === 'undefined') mode_p = 0;
    if (typeof(color_p) === 'undefined') color_p = 'reset';

    const level0 = level_p;
    const level1 = level_p + 1;

    msg = "Errors"
    display_title(msg_p = msg, level_p = level0, mode_p = mode_p);
    // color = colors[color_p]
    // color_rst = colors['reset']
    msg_array = _convert_str_to_array(msg_p = msg_p)
    str_indent = duplicate_str(str_p = CHAR_INDENT, nb_times_p = NB_CHAR_INDENT * level1);

    for (var i = 0; i < msg_array.length; i++) {
        msg_tmp = msg_array[i];
        // str0 = color + str_indent + ' ' + msg_tmp + color_rst
        str0 = str_indent + ' ' + msg_tmp;
        print(str0);
    }
}
/**
 * Display the address and the data in hexadecimal
 * @param {number} addr_p - address value
 * @param {number} addr_width_p - address width (expressed in bit)
 * @param {number} data_p - data value
 * @param {number} data_width_p - data width (expressed in bit)
 * @param {number} level_p - level of indentation at the beginning
 * @param {number} mode_p - define the output print
 */
function display_register(addr_p, addr_width_p, data_p, data_width_p, level_p, mode_p) {
    // default function parameter values
    if (typeof(level_p) === 'undefined') level_p = 0;
    if (typeof(mode_p) === 'undefined') mode_p = 0;

    const level0 = level_p;

    msg = 'addr: 0x' + convert_int_to_str_hex(value_p = addr_p, width_p = addr_width_p);
    display(msg_p = msg, level_p = level0, mode_p = mode_p);
    msg = 'data: 0x' + convert_int_to_str_hex(value_p = data_p, width_p = data_width_p);
    display(msg_p = msg, level_p = level0, mode_p = mode_p);

}

/**
 * Extract bit field from data and display it.
 * @param {string} bit_name_p - bit name
 * @param {number} bit_pos_p - bit position in the range [0; max integer value[
 * @param {number} bit_width_p - bit width
 * @param {number} data_p - data width (expressed in bit)
 * @param {number} level_p - level of indentation at the beginning
 * @param {number} mode_p - define the output print
 */
function display_bit_from_data(bit_name_p, bit_pos_p, bit_width_p, data_p, level_p, mode_p) {


    mask = Math.pow(2, bit_width_p) - 1; // 2**bit_width_p - 1;
    value = (data_p >> bit_pos_p) & mask; // return a int32_t

    // convert int to uint
    if (value < 0)
    {
        // value = Math.pow(2, bit_width_p) - value;
        value += (1 << 30) * 4;
    }

    display_bit(bit_name_p = bit_name_p, bit_value_p = value, bit_width_p = bit_width_p, level_p = level_p, mode_p = mode_p);


}

/**
 * print a bit field in the hexadecimal format
 * @param {string} bit_name_p - bit name
 * @param {number} bit_value_p - bit value
 * @param {number} bit_width_p - bit width
 * @param {number} level_p - level of indentation at the beginning
 * @param {number} mode_p - define the output print
 */
function display_bit(bit_name_p, bit_value_p, bit_width_p, level_p, mode_p) {
    // default function parameter values
    if (typeof(level_p) === 'undefined') level_p = 0;
    if (typeof(mode_p) === 'undefined') mode_p = 0;

    msg = bit_name_p + ': 0x' + convert_int_to_str_hex(value_p = bit_value_p, width_p = bit_width_p);
    display(msg_p = msg, level_p = level_p, mode_p = mode_p);
}


/**
 * Convert the input string into an string array
 * @param {string} msg_p - message to print (string or array of strings)
 * @param {number} level_p - level of indentation at the beginning
 * @param {string} color_p - define the message color. The list of colors can be found in the common.console_colors
 * @return {string} array of string - array of string
 */
function _convert_str_to_array(msg_p) {
    if (typeof msg_p === 'string') {
        msg = [msg_p];
    } else {
        msg = msg_p;
    }
    return msg;
}

/**
 * Convert a integer to string (hexadecimal representation). The result is zero padded to match the width_p parameters
 * @param {number} value_p - integer value to convert
 * @param {number} width_p - value bus width (expressed in bits)
 * @return {string} string hexadecimal value
 */
function convert_int_to_str_hex(value_p, width_p) {
    // default function parameter values
    if (typeof(width_p) === 'undefined') width_p = 32;

    // compute the number of hex decimal to output
    nb_hex_char = Math.ceil(width_p / 4);
    str_hex = value_p.toString(16);
    
    // extends on the left side the hexadecimal string with 0
    while (str_hex.length < nb_hex_char) {
        str_hex = "0" + str_hex;
    }
    return str_hex;

}

/**
 * Convert a hexadecimal code value (integer value) to ASCII string
 * @param {number} value_p - integer value to convert (hexadecimal ascii code)
 * @param {number} width_p - value bus width (expressed in bits)
 * @return {string} ASCII characters
 */
function convert_hex_to_ascii(value_p, width_p) {
    // default function parameter values
    if (typeof(width_p) === 'undefined') width_p = 32;

    // compute the number bytes
    nb_bytes = Math.ceil(width_p / 8);
    str0 = '';
    for (i = 0; i < nb_bytes; i++) {
        value_tmp = (0xFF) & (value_p >> (8 * i));
        str0 = String.fromCharCode(value_tmp) + str0;
    }
    return str0;

}

/**
 * Convert an unsigned int value into an int value (2's complement)
 * @param {number} value_p - unsigned integer value to convert
 * @param {number} width_p - value bus width (expressed in bits)
 * @return {number} converted value
 */
function convert_uint_to_int(data_p, width_p) {
    if (data_p >= Math.pow(2, width_p - 1)) {
        const val = data_p - Math.pow(2, width_p);
    } else {
        const val = data_p;
    }
    return val
}

/**
 * Convert an int value (2's complement) into an unsigned int value.
 * @param {number} value_p - int value to convert
 * @param {number} width_p - value bus width (expressed in bits)
 * @return {number} converted value
 */
function convert_int_to_uint(data_p, width_p) {
    if (data_p < 0) {
        const val = Math.pow(2, width_p) + data_p;
    } else {
        const val = data_p;
    }
    return val;
}

//---------------------------------------------------------------------------------------