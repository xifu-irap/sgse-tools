// -------------------------------------------------------------------------------------------------------------
//                              Copyright (C) 2022-2030 Ken-ji de la Rosa, IRAP Toulouse.
// -------------------------------------------------------------------------------------------------------------
//                              This file is part of the ATHENA X-IFU DRE Focal Plane Assembly simulator.
//
//                              fpasim-fw is free software: you can redistribute it and/or modify
//                              it under the terms of the GNU General Public License as published by
//                              the Free Software Foundation, either version 3 of the License, or
//                              (at your option) any later version.
//
//                              This program is distributed in the hope that it will be useful,
//                              but WITHOUT ANY WARRANTY; without even the implied warranty of
//                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                              GNU General Public License for more details.
//
//                              You should have received a copy of the GNU General Public License
//                              along with this program.  If not, see <https://www.gnu.org/licenses/>.
// -------------------------------------------------------------------------------------------------------------
//    email                   kenji.delarosa@alten.com
//    @file                   fpasim_test_make_pulse_generation.dscript
// -------------------------------------------------------------------------------------------------------------
//    Automatic Generation    No
//    Code Rules Reference
// -------------------------------------------------------------------------------------------------------------
//    @details
//
//    This test generates several make_pulse and make_pulseS commands.
//
//    This javascript does the following steps:
//        1. configure the spi devices
//        2. reset the FPASim functions
//        3. configure the FPASIM RAMs
//        4. configure the FPASIM registers
//        5. generate few make_pulse commands
//        6. generate few make_pulse_all commands
//
//
// -------------------------------------------------------------------------------------------------------------

// import javascript
include("./fpasim/fpasimTools.dscript");



/**
 * Load the steady_state ram with the same default values
 */
function tes_steady_state_conf_ram() {

    tab_length = 64;
    pulse_shape = Array(tab_length);
    cnt = 0;
    for (i = 0; i < tab_length; ++i) {
        //pulse_shape[i] = 0xE666;
        pulse_shape[i] = 0xFFFF;
    }

    sendToFPAsim_loadTES_steadyState(pulse_shape);

}

/**
 * Load the mux_squid_tf ram with a ramp (with a step of 1)
 */
function mux_quid_tf_conf_ram() {


    tab_length = 8192;
    pulse_shape = Array(tab_length);
    cnt = 0;
    for (i = 0; i < tab_length; ++i) {
        pulse_shape[i] = cnt;
        if (cnt == 16383) {
            cnt = 0;
        } else {
            cnt = cnt + 1;
        }
    }

    sendToFPAsim_loadSQM_TF(pulse_shape);

}

/**
 * Load the amp_squid_tf ram with a ramp (with a step of 1)
 */
function amp_quid_tf_conf_ram() {


    tab_length = 16384;
    pulse_shape = Array(tab_length);
    cnt = 0;
    for (i = 0; i < tab_length; ++i) {
        pulse_shape[i] = cnt;
        if (cnt == 16383) {
            cnt = 0;
        } else {
            cnt = cnt + 1;
        }
    }

    sendToFPAsim_loadSQA_TF(pulse_shape);

}


/**
 * Script Entry Point
 * @param {number} level_p - level of indentation at the beginning
 * @param {number} mode_p - define the print output
 * @param {number} verbosity_p - level of verbosity
 */
function main(level_p, mode_p, verbosity_p) {

    // default function parameter values
    if (typeof(level_p) === 'undefined') level_p = 0;
    if (typeof(mode_p) === 'undefined') mode_p = 0;
    if (typeof(verbosity_p) === 'undefined') verbosity_p = 0;


    const level0 = 0;
    const level1 = level0 + 1;
    const level2 = level0 + 2;

    // script name
    script_name = "fpasim_test_make_pulse_generation";

    /*
     ***************************************************************************
     * display the test description
     ***************************************************************************
     */
    msg = "Test description: " + script_name;
    display_title(msg, level0, mode_p);

    msg = "This test does the following steps:"
    display(msg, level1, mode_p);
    msg = [
        "1. configure the spi devices",
        "2. reset the FPASim functions",
        "3. configure the FPASIM RAMs",
        "4. configure the FPASIM registers",
        "5. generate few make_pulse commands",
        "6. generate few make_pulse_all commands"
    ]
    display(msg, level2, mode_p);

    msg = "";
    display(msg, level1, mode_p);

    /*
     ***************************************************************************
     * display the script info
     ***************************************************************************
     */
    list_tmp       = fpasim_script_info(level0, mode_p, 2);
    error_info_cnt = list_tmp[0];
    info           = list_tmp[1];

    // build output filename
    output_filename = script_name + "__" + info + ".txt";

    /*
     ***************************************************************************
     * configure spi devices, FPAsim RAM with default values
     ***************************************************************************
     */
    msg = "Configure spi devices + FPAsim RAMs with default values";
    display_title(msg, level0, mode_p);
    error_load_ram_cnt = fpasim_configure(level1, mode_p, verbosity_p);


    /*
     ***************************************************************************
     * reset the fpasim function
     ***************************************************************************
     */
    msg = "Reset the fpasim function";
    display_title(msg, level0, mode_p);
    fpasim_reset(level1, mode_p, verbosity_p);


    /*
     ***************************************************************************
     * Configure the FPASIM functions
     ***************************************************************************
     */

    msg = "Configure the fpasim function";
    display_title(msg, level0, mode_p);

    // set the register: MUX_SQ_FB_DELAY
    mux_sq_fb_delay = 0x0;
    msg = "Set register: MUX_SQ_FB_DELAY";
    display(msg, level1, mode_p);
    sendToFPAsim_configureFeedbackDelay(mux_sq_fb_delay);

    msg = "";
    display(msg, level1, mode_p);



    // set the register: AMP_SQ_OF_DELAY
    amp_sq_of_delay = 0x0;
    msg = "Set register: AMP_SQ_OF_DELAY";
    display(msg, level1, mode_p);
    sendToFPAsim_configureOffsetCompDelay(amp_sq_of_delay);

    msg = "";
    display(msg, level1, mode_p);


    // set the register: ERROR_DELAY
    error_delay = 0x0;
    msg = "Set register: ERROR_DELAY";
    display(msg, level1, mode_p);
    sendToFPAsim_configureErrorDelay(error_delay);

    msg = "";
    display(msg, level1, mode_p);


    // set the register: RA_DELAY
    ra_delay = 0x0;
    msg = "Set register: RA_DELAY";
    display(msg, level1, mode_p);
    sendToFPAsim_configureRaDelay(ra_delay);

    msg = "";
    display(msg, level1, mode_p);


    // set the register: TES_CONF
    nbPixels = 34;
    nbSamplesPerPixel = 40;
    totalFrameSize = nbPixels * nbSamplesPerPixel;

    nbPixels = nbPixels - 1; // add -1 because we start from 0
    nbSamplesPerPixel = nbSamplesPerPixel - 1; // add -1 because we start from 0
    totalFrameSize = totalFrameSize - 1; // add -1 because we start from 0
    msg = "Set register: TES_CONF";
    display(msg, level1, mode_p);
    sendToFPAsim_configureTES_conf(nbPixels, nbSamplesPerPixel, totalFrameSize);

    msg = "";
    display(msg, level1, mode_p);

    // set the register: CONF0
    inter_squid_gain = 0xFF;
    msg = "Set register: CONF0";
    display(msg, level1, mode_p);
    data = fpasim_build_conf0(inter_squid_gain);
    fpasim_set_debug_wirein_by_name('CONF0', data, level2, mode_p);

    msg = "";
    display(msg, level1, mode_p);

    /*
     ***************************************************************************
     configure the mux_squid_tf RAM: ramp
      ***************************************************************************
      */
    msg = "Configure the FPASim mux_squid_tf RAM: ramp";
    display(msg, level1, mode_p);
    mux_quid_tf_conf_ram();

    msg = "";
    display(msg, level1, mode_p);

    /*
     ***************************************************************************
     configure the amp_squid_tf RAM: ramp
      ***************************************************************************
      */
    msg = "Configure the FPASim amp_squid_tf RAM: ramp";
    display(msg, level1, mode_p);
    amp_quid_tf_conf_ram();

    msg = "";
    display(msg, level1, mode_p);

    /*
     ***************************************************************************
     configure a ramp in the tes_steady_state
      ***************************************************************************
      */
    msg = "Configure the FPASim tes_steady_state RAM: constant (max value)";
    display(msg, level1, mode_p);
    tes_steady_state_conf_ram();

    msg = "";
    display(msg, level1, mode_p);


    /*
     ***************************************************************************
     Enable the fpasim function
      ***************************************************************************
      */
    session_name = getText("Enable the fpasim function");
    // Enable the fpasim funcion

    rst = 0;
    en = 1;
    data = fpasim_build_ctrl(rst, en);
    msg = "Enable the FPASIM function";
    display(msg, level1, mode_p);
    sendToFPAsim_configureControl(data);

    msg = "";
    display(msg, level1, mode_p);


    /*
     ***************************************************************************
     * Generate make_pulse commands (1 pixel)
     ***************************************************************************
     */
    nb_iteration = 5; // number of make_pulse command
    msg0 = "nb_iteration= " + nb_iteration.toString(10);
    msg = "Generate make_pulse commands: " + msg0;
    display_title(msg, level0, mode_p);

    // declare tab
    pixel_id_tab = Array(nb_iteration);
    time_shift_tab = Array(nb_iteration);
    pulse_height_tab = Array(nb_iteration);

    // user-defined: edit indivual tab values.
    pixel_id_tab[4] = 0;
    pixel_id_tab[3] = 0;
    pixel_id_tab[2] = 0;
    pixel_id_tab[1] = 0;
    pixel_id_tab[0] = 0;

    time_shift_tab[4] = 0;
    time_shift_tab[3] = 0;
    time_shift_tab[2] = 0;
    time_shift_tab[1] = 0;
    time_shift_tab[0] = 0;

    pulse_height_tab[4] = fpasim_convert_percentage_to_pulse_height(14);
    pulse_height_tab[3] = fpasim_convert_percentage_to_pulse_height(12);
    pulse_height_tab[2] = fpasim_convert_percentage_to_pulse_height(10);
    pulse_height_tab[1] = fpasim_convert_percentage_to_pulse_height(8);
    pulse_height_tab[0] = fpasim_convert_percentage_to_pulse_height(6);


    session_name = getText("Start loop");
    // loop
    for (i = 0; i < nb_iteration; i++) {
        iter = i + 1;
        msg = 'iteration: ' + iter.toString(10) + '/' + nb_iteration.toString(10);

        pixel_id = pixel_id_tab[i];
        time_shift = time_shift_tab[i];
        pulse_height = pulse_height_tab[i];

        session_name = getText("make_pulse iteration" + i.toString(10) + ", pulse_height:" + pulse_height.toString(16));

        msg = "Set Make_pulse (1 pixel): pixel_id: " + pixel_id.toString(10) + ", time_shift: " + time_shift.toString(10) + ", pulse_height: 0x" + pulse_height.toString(16);
        display(msg, level1, mode_p);

        sendToFPAsim_makePulse(pixel_id, time_shift, pulse_height);

    }

    msg = "";
    display(msg, level1, mode_p);

    /*
     ***************************************************************************
     * Generate make_pulses commands (all pixels)
     ***************************************************************************
     */
    nb_iteration = 5; // number of make_pulse command
    msg0 = "nb_iteration= " + nb_iteration.toString(10);
    msg = "Generate make_pulses commands: " + msg0;
    display_title(msg, level0, mode_p);

    // declare
    time_shift_tab = Array(nb_iteration);
    pulse_height_tab = Array(nb_iteration);

    // user-defined: edit indivual tab values.
    time_shift_tab[4] = 0;
    time_shift_tab[3] = 0;
    time_shift_tab[2] = 0;
    time_shift_tab[1] = 0;
    time_shift_tab[0] = 0;

    pulse_height_tab[4] = fpasim_convert_percentage_to_pulse_height(14);
    pulse_height_tab[3] = fpasim_convert_percentage_to_pulse_height(12);
    pulse_height_tab[2] = fpasim_convert_percentage_to_pulse_height(10);
    pulse_height_tab[1] = fpasim_convert_percentage_to_pulse_height(8);
    pulse_height_tab[0] = fpasim_convert_percentage_to_pulse_height(6);


    // loop
    for (i = 0; i < nb_iteration; i++) {
        iter = i + 1;
        msg = 'iteration: ' + iter.toString(10) + '/' + nb_iteration.toString(10);

        time_shift = time_shift_tab[i];
        pulse_height = pulse_height_tab[i];
        session_name = getText("make_pulseS iteration" + i.toString(10) + ", pulse_height:" + pulse_height.toString(16));

        msg = "Set Make_pulse (all pixels): pixel_id: N/A, time_shift: " + time_shift.toString(10) + ", pulse_height: 0x" + pulse_height.toString(16);
        display(msg, level1, mode_p);

        sendToFPAsim_makePulses(time_shift, pulse_height);
    }

    msg = "";
    display(msg, level1, mode_p);

    /*
    disable the FPASim
    */
    msg = "Set CTRL: Enable Off"
    display(msg, level1, mode_p);

    rst = 0;
    en = 0;
    // build the data to send
    data = fpasim_build_ctrl(rst, en);
    sendToFPAsim_configureControl(data);
    msg = "";
    display(msg, level1, mode_p);


    /*
     ***************************************************************************
     * check all errors
     ***************************************************************************
     */
    error_debug_cnt = 0;
    msg = "Check internal errors (debug)";
    display_title(msg, level0, mode_p);
    error_debug_cnt = fpasim_check_all_errors(level1, 0, 0);


    /*
     ***************************************************************************
     * Summary
     ***************************************************************************
     */

    msg = "Summary: Errors";
    display_title(msg, level1, mode_p);

    // get hardware_id
    reg_name = 'HARDWARE_ID';
    msg = "Get " + reg_name + ": ";
    display(msg, level1, mode_p);
    data = fpasim_get_wireout_by_name(reg_name, level2, mode_p, 2);

    msg = "";
    display(msg, level1, mode_p);

    // get the firmware name
    reg_name = 'FIRMWARE_NAME';
    msg = "Get " + reg_name + ": ";
    display(msg, level1, mode_p);
    data = fpasim_get_wireout_by_name(reg_name, level2, mode_p, 2);


    msg = " ";
    display(msg, level1, mode_p);

    // get firmware id
    reg_name = 'FIRMWARE_ID';
    msg = "Get " + reg_name + ": ";
    display(msg, level1, mode_p);
    data = fpasim_get_wireout_by_name(reg_name, level2, mode_p, 2);

    msg = " ";
    display(msg, level1, mode_p);

     // summary of the fpasim_script_info errors
    if (error_info_cnt == 0) {
        msg_tmp = "[OK]: Script Info: " + error_info_cnt.toString(10) + " error";
        display(msg_tmp, level1, mode_p);
    } else {
        msg_tmp = "[KO]: Script Info: " + error_info_cnt.toString(10) + " errors";
        display(msg_tmp, level1, mode_p);
    }

    // summary of the RAM loading with default value
    if (error_load_ram_cnt == 0) {
        msg_tmp = "[OK]: RAM loading :" + error_load_ram_cnt.toString(10) + " error";
        display(msg_tmp, level1, mode_p);
    } else {
        msg_tmp = "[KO]: RAM loading :" + error_load_ram_cnt.toString(10) + " errors";
        display(msg_tmp, level1, mode_p);
    }


    if (error_debug_cnt == 0) {
        msg_tmp = "[OK]: Debug internal errors: " + error_debug_cnt.toString(10) + " error";
        display(msg_tmp, level1, mode_p);
    } else {
        msg_tmp = "[KO]: Debug internal errors: " + error_debug_cnt.toString(10) + " errors";
        display(msg_tmp, level1, mode_p);
    }


    /*
     ***************************************************************************
     * End of Test
     ***************************************************************************
     */
    msg = "End of Test";
    display_title(msg, level0, mode_p);

    /*
     ***************************************************************************
     * Save the Log content
     ***************************************************************************
     */
    saveLogContent(output_filename);

}

/**
 * Execute the main function
 * @param {number} level_p - level of indentation at the beginning
 * @param {number} mode_p - define the print output
 * @param {number} verbosity_p - level of verbosity
 */
main(0, 0, 2);