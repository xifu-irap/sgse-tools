// -------------------------------------------------------------------------------------------------------------
//                              Copyright (C) 2022-2030 Laurent Ravera, IRAP Toulouse.
// -------------------------------------------------------------------------------------------------------------
//                              This file is part of the ATHENA X-IFU DRE SGSE tools.
//
//                              sgse tools javascripts are free software: you can redistribute it and/or modify
//                              it under the terms of the GNU General Public License as published by
//                              the Free Software Foundation, either version 3 of the License, or
//                              (at your option) any later version.
//
//                              This program is distributed in the hope that it will be useful,
//                              but WITHOUT ANY WARRANTY; without even the implied warranty of
//                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//                              GNU General Public License for more details.
//
//                              You should have received a copy of the GNU General Public License
//                              along with this program.  If not, see <https://www.gnu.org/licenses/>.
// -------------------------------------------------------------------------------------------------------------
//    email                     laurent.ravera@irap.omp.eu
//    @file                     fbMuxLinearity.dscript
// -------------------------------------------------------------------------------------------------------------
//    @details
//
//    This file is used to characterise the linearity of the feedback signal.
//
// -------------------------------------------------------------------------------------------------------------

// imports
include("../demux/dmxTools.dscript");
include("../demux/dmxRegAddresses.dscript");
include("../demux/dmxHk.dscript");

include("../common/utilTools.dscript");
include("../common/constants.dscript");

/**
 * Converts the DAC codes into feedback values.
 *   The DAC 5675A-SP converts 14-bits unsigned values into an analogue signal.
 *   At system level the feedback values are considered to be S(16,2) values.
 *   The DEMUX firmware converts the S(16,2) values to U(14,0) values for the DAC.
 *   This function does the reverse conversion in order to control the values that
 *   will be sent to the DAC.
 * @param {number} val_p - The DAC value U(14,0).
 * @param {boolean} neg_p - If true the 14-bit value is replaced by (2^14-1-value).
 * @return feedbackValue - The feedback value S(16,2)
 */
function convertDac2Feedback(val_p, neg_p) {

    const FDBK_DAC_NBITS = 14;
    const offset = Math.pow(2, FDBK_DAC_NBITS-1);

    if ((val_p < 0) || (val_p > Math.pow(2, FDBK_DAC_NBITS)-1)) {
        print("ERROR, DAC value is incorrect! Should be betwwen 0 and 2^14-1 --> " + val_p);
        return;
    }

	var feedbackValue = (val_p - offset);

	if (neg_p) feedbackValue = Math.pow(2, FDBK_DAC_NBITS)-1 - feedbackValue;

	return feedbackValue*4;
}


/**
 * Sets different values to a fb DAC in order to measure the output level for each DAC BIT
 *   The execution of this script has to be combined with measurements at the DEMUX output.
 * @param {boolean} neg_p - If true the 14-bit value is replaced by (2^14-1-value).
 */
function characLinearityFdbk(neg_p) {

    const FDBK_DAC_NBITS = 14;

    print("");
    print("***");
    print("* characLinearityFdbk function");
    print("***");
    print("");

    // Switching ON the feedbacks
	print(TAB1+"Switching feedbacks ON...");
    setDMX_feedbackOnOff([ON, ON, ON, ON]);

    // DEMUX feedback
	print(TAB1+"Setting the DMX feedback mode to OPEN_LOOP (FB0 -> FEEDBACK output)...");
    const fdbkMode = makeArray(DMX_NB_PIX_PER_COL, FEEDBACK_MODE_OPEN_LOOP);
    for (var col=0; col<DMX_NB_COL; col++) setDMX_sqm_FBMode(col, fdbkMode);

    // Setting the code 0
    var value = 0;
    var valueFbck = convertDac2Feedback(value, neg_p);
    print(TAB2 + "Setting FB DAC to " + value + " (feedback = " + valueFbck + ")");
    for (col = 0; col<DMX_NB_COL; col++) setDMX_fb0(col, makeArray(DMX_NB_PIX_PER_COL, valueFbck));
    // Measurement
    answer = getText("Please measure the feedback signal. Click when that is done.", " ");

    // Setting the codes for each bit (from 2^0 to 2^13)
    for (var bit=0; bit<FDBK_DAC_NBITS; bit++) {

        // New setting
        value = Math.pow(2, bit);
        var valueFbck = convertDac2Feedback(value, neg_p);
        print(TAB2 + "Setting FB DAC to " + value + " (feedback = " + valueFbck + ")");
        for (col = 0; col<DMX_NB_COL; col++) setDMX_fb0(col, makeArray(DMX_NB_PIX_PER_COL, valueFbck));
        // Measurement
        answer = getText("Please measure the feedback signal. Click when that is done.", " ");
    }

    // Setting the code for the maximum value (0x3FFF)
    var value = 0x3FFF;
    var valueFbck = convertDac2Feedback(value, neg_p);
    print(TAB2 + "Setting FB DAC to " + value + " (feedback = " + valueFbck + ")");
    for (col = 0; col<DMX_NB_COL; col++) setDMX_fb0(col, makeArray(DMX_NB_PIX_PER_COL, valueFbck));
    // Measurement
    answer = getText("Please measure the feedback signal. Click when that is done.", " ");

}



// -------------------------------------------------------------------------------------------------------------


characLinearityFdbk(true);


// -------------------------------------------------------------------------------------------------------------
print("End of script!");





